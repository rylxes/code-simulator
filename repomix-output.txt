This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  codesimulator/
    back/
      code.txt
      code2.txt
    resources/
      code/
        code3.txt
      applications.json
      config.json
      README
    __main__.py
    actions.py
    app_switcher.py
    app.py
    config.py
    key_handler.py
    language_formatter.py
    logging_config.py
    mouse.py
    path_utils.py
tests/
  codesimulator.py
  test_app.py
.gitignore
CHANGELOG
deploy.sh
LICENSE
pyproject.toml
README.rst

================================================================
Files
================================================================

================
File: src/codesimulator/back/code.txt
================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}



.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}




.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}




.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}







.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}



.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}




.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}




.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}







.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}



.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}




.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}




.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}







.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}



.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}




.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}




.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}







.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}



.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}




.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}




.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}







.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}



.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}




.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}




.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}







.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}



.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}




.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}




.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}







.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}



.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}




.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}




.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}







.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}



.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}




.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}





.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}




.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}







@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    overflow-x: hidden;
    scroll-behavior: smooth;
}

::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #1c1c1c;
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: rgb(17, 17, 17);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgb(17, 17, 17);
}

================
File: src/codesimulator/back/code2.txt
================
<?<?php

namespace App\Console\Commands\Migration;

use App\Models\Reimbursement;
use App\Services\Migration\MigrationLogger;
use App\Traits\MigrationVerificationTrait;
use Exception;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Log;
use App\Console\Commands\ByUser\FetchCraftParticipantUserData;
use App\Console\Commands\ByUser\FetchCraftClaimUserData;

class MigrateCraftData extends Command
{
  use MigrationVerificationTrait;

  protected $signature = 'migrate:all-craft-data
                        {--user-id= : Single user ID to migrate}
                        {--start-id= : Start of user ID range}
                        {--end-id= : End of user ID range}
                        {--verify : Only verify data without migration}
                        {--dry-run : Show what would be migrated without actually migrating}';

  protected $description = 'Migrate data from CraftCMS to Laravel';
  protected $dbOperations = [];
  protected $operationCounts = [];

  protected $participantFetcher;
  protected $claimFetcher;

  protected $currentUserId;
  protected $startTime;
  protected $logger;


  public function __construct(FetchCraftParticipantUserData $participantFetcher, FetchCraftClaimUserData $claimFetcher)
  {
    parent::__construct();
    $this->participantFetcher = $participantFetcher;
    $this->claimFetcher = $claimFetcher;
  }

  private function logDbOperation($table, $operation, $data = null)
  {
    $context = [
      'table' => $table,
      'operation' => $operation,
      'data' => $data
    ];

    $message = "DB Operation: {$operation} on {$table}";
    $this->logger->info($message, $context);

    // Store for summary
    $this->dbOperations[] = [
      'timestamp' => now(),
      'table' => $table,
      'operation' => $operation,
      'data' => $data
    ];

    $key = "{$table}_{$operation}";
    $this->operationCounts[$key] = ($this->operationCounts[$key] ?? 0) + 1;
  }


  private function displayDbOperationsSummary()
  {
    $this->logger->info("\nDatabase Operations Summary:");

    $summary = [];
    foreach ($this->operationCounts as $key => $count) {
      list($table, $operation) = explode('_', $key);
      $summary[] = [
        'Table' => $table,
        'Operation' => $operation,
        'Count' => $count
      ];
    }

    $this->table(
      ['Table', 'Operation', 'Count'],
      $summary
    );

    // Write to log file
    Log::info('Database Migration Operations', [
      'operations' => $this->dbOperations,
      'summary' => $summary
    ]);
  }

  private function logMigrationOperation($operation, $status, $data = [])
  {
    $context = array_merge($data, [
      'operation' => $operation,
      'status' => $status,
      'timestamp' => now()->toDateTimeString()
    ]);

    $this->logger->info("Migration operation: {$operation}", $context);
  }


  public function handle()
  {
    $this->startTime = now();

    try {
      // Parse command options
      $userId = $this->option('user-id');
      $startId = $this->option('start-id');
      $endId = $this->option('end-id');
      $verifyOnly = $this->option('verify');
      $isDryRun = $this->option('dry-run');

      // Validate input combinations
      if (!$this->validateInput($userId, $startId, $endId)) {
        return 1;
      }

      // Get user IDs to process
      $userIds = $this->getUserIds($userId, $startId, $endId);

      foreach ($userIds as $currentUserId) {
        // Initialize logger for current user
        $this->logger = new MigrationLogger($currentUserId);
        $this->logger->info("Starting migration process for user {$currentUserId}");

        try {
          if ($verifyOnly) {
            $this->verifyData($currentUserId);
          } else {
            $success = $this->migrateUserData($currentUserId, $isDryRun);

            if ($success && !$isDryRun) {
              // Run post-migration validation
              $this->runPostMigrationValidation($currentUserId);
            }
          }

          // Generate migration summary
          $this->logMigrationSummary($currentUserId);

        } catch (Exception $e) {
          $this->logger->error("Error processing user {$currentUserId}", [
            'error' => $e->getMessage(),
            'trace' => $e->getTraceAsString()
          ]);
          continue;
        }
      }

      $this->logger->info("\nMigration completed successfully!");
      return 0;

    } catch (Exception $e) {
      $this->logger->error("Fatal error during migration: " . $e->getMessage());
      if (isset($this->logger)) {
        $this->logger->error("Fatal migration error", [
          'error' => $e->getMessage(),
          'trace' => $e->getTraceAsString()
        ]);
      }
      return 1;
    }
  }


  protected function validateInput($userId, $startId, $endId)
  {
    if ($userId && ($startId || $endId)) {
      $this->logger->error('Cannot specify both single user ID and range');
      return false;
    }

    if (($startId && !$endId) || (!$startId && $endId)) {
      $this->logger->error('Must specify both start and end IDs for range');
      return false;
    }

    if ($startId && $endId && $startId > $endId) {
      $this->logger->error('Start ID must be less than or equal to End ID');
      return false;
    }

    return true;
  }

  protected function getUserIds($userId, $startId, $endId)
  {
    if ($userId) {
      return collect([$userId]);
    }

    if ($startId && $endId) {
      return range($startId, $endId);
    }

    // Default to all users if no specific IDs provided
    return DB::connection('craft')
      ->table('users')
      ->pluck('id');
  }

  protected function verifyData($userId)
  {
    $this->logger->info("\nVerifying data for User ID: $userId");

    // Verify User Data
    $craftUser = $this->getCraftUserData($userId);
    $laravelUser = $this->getLaravelUserData($userId);

    $this->verifyUserData($craftUser, $laravelUser);

    // Verify Participant Data
    $craftParticipant = $this->getCraftParticipantData($userId);
    $laravelParticipant = $this->getlaravelParticipantData($userId);

    $this->verifyParticipantData($craftParticipant, $laravelParticipant);

    // Verify Claims Data
    $craftClaims = $this->getCraftClaimsData($userId);
    $laravelClaims = $this->getLaravelClaimsData($userId);

    $this->verifyClaimsData($craftClaims, $laravelClaims);
  }


  protected function getLaravelUserData($userId)
  {
    return DB::table('users')
      ->where('id', $userId)
      ->first();
  }

  protected function getCraftUserData($userId)
  {
    return DB::connection('craft')
      ->table('users as u')
      ->join('elements as e', 'u.id', '=', 'e.id')
      ->where('u.id', $userId)
      ->where('e.enabled', 1)
      ->whereNull('e.dateDeleted')
      ->select([
        'u.id',
        'u.username',
        'u.firstName',
        'u.lastName',
        'u.email',
        'u.password',
        'u.admin',
        'u.locked',
        'u.suspended',
        'u.pending',
        'u.lastLoginDate',
        'u.dateCreated',
        'u.dateUpdated'
      ])
      ->first();
  }


  protected function getCraftClaimsData($userId)
  {
    try {
      $query = DB::connection('craft')
        ->table('elements as claims')
        ->join('content as claimContent', 'claimContent.elementId', '=', 'claims.id')
        ->join('entries as claimEntries', 'claimEntries.id', '=', 'claims.id')
        ->leftJoin('relations as participantRelation', function ($join) {
          $join->on('participantRelation.sourceId', '=', 'claims.id')
            ->where('participantRelation.fieldId', function ($query) {
              $query->select('id')
                ->from('fields')
                ->where('handle', 'participant')
                ->limit(1);
            });
        })
        ->leftJoin('elements as participants', 'participantRelation.targetId', '=', 'participants.id')
        ->leftJoin('content as participantContent', 'participantContent.elementId', '=', 'participants.id')
        ->where('claims.type', 'craft\\elements\\Entry')
        ->whereNull('claims.dateDeleted');

      if ($userId) {
        $query->whereExists(function ($subquery) use ($userId) {
          $subquery->select(DB::raw(1))
            ->from('relations')
            ->where('relations.sourceId', $userId)
            ->where('relations.fieldId', 152)
            ->whereRaw('relations.targetId = claims.id');
        });
      }

      $claims = $query->select([
        'claims.id as craftId',
        'claims.dateCreated',
        'claims.dateUpdated',
        'claimContent.field_claimId',
        'claimContent.field_passengers',
        'claimContent.field_claimStatus',
        'claimContent.field_paymentStatus',
        'claimContent.field_firstName',
        'claimContent.field_middleName',
        'claimContent.field_lastName',
        'claimContent.field_email',
        'claimContent.field_address',
        'claimContent.field_city',
        'claimContent.field_state',
        'claimContent.field_zipCode',
        'claimContent.field_primaryPhone',
        'claimContent.field_secondaryPhone',
        'claimContent.field_createDate',
        'claimContent.field_claimAmountTotal',
        'claimContent.field_claimAmountBasis',
        'claimContent.field_departureDate',
        'claimContent.field_returnDate',
        'claimContent.field_servicesPurchased',
        'claimContent.field_hasInsurance',
        'claimContent.field_hasReimbursementSource',
        'participantContent.field_tcrcId as participantTcrcId'
      ])->get();


      //dd($claims);

      // Enhance each claim with its related data
      return $claims->map(function ($claim) use ($userId) {
        // Get passengers

        //dd($claim->craftId);
        $passengers = json_decode($claim->field_passengers, true) ?: [];


        // Get payment history
        $payments = DB::connection('craft')
          ->table('matrixblocks as mb')
          ->join('matrixcontent_paymenthistory as mph', 'mb.id', '=', 'mph.elementId')
          ->where('mb.ownerId', $claim->craftId)
          ->select([
            'mph.field_payment_paymentTypeName',
            'mph.field_payment_paymentForType',
            'mph.field_payment_paidDate',
            'mph.field_payment_expireDate',
            'mph.field_payment_createDate',
            'mph.field_payment_assessmentFee',
            'mph.field_payment_lateFee',
            'mph.field_payment_totalFee',
            'mph.field_payment_subtotalAmount',
            'mph.field_payment_totalAmount',
            'mph.field_payment_ccAuthNumber',
            'mph.field_payment_ccErrorCode',
            'mph.field_payment_ccErrorText',
            'mph.field_payment_checkNumber',
            'mph.field_payment_checkAmount',
            'mph.field_payment_checkDate',
            'mph.field_payment_checkClearedDate',
            'mph.field_payment_checkBouncedDate',
            'mph.field_payment_note',
            'mph.field_payment_numberOfLocations',
            'mph.field_payment_emergencyPaymentReferenceId',
            'mph.field_payment_manualCorrection'
          ])
          ->get();

        // Get collaterals
        $collaterals = DB::connection('craft')
          ->table('matrixblocks as mb')
          ->join('matrixcontent_collaterals as mc', 'mb.id', '=', 'mc.elementId')
          ->where('mb.ownerId', $claim->craftId)
          ->select([
            'mc.field_collaterals_fileName',
            'mc.field_collaterals_fileDescription',
            'mc.field_collaterals_createDate'
          ])
          ->get();

        $participantId = null;
        if ($claim->participantTcrcId) {
          $laravelParticipant = DB::table('participants')
            ->where('tcrcId', $claim->participantTcrcId)
            ->first();
          if ($laravelParticipant) {
            $participantId = $laravelParticipant->id;
          }
        }

        // Return enhanced claim data
        return [
          'craftId' => $claim->craftId,
          'claimId' => $claim->field_claimId,
          'status' => $claim->field_claimStatus,
          'userId' => $userId,
          'paymentStatus' => $claim->field_paymentStatus,
          'claimant' => [
            'firstName' => $claim->field_firstName,
            'middleName' => $claim->field_middleName,
            'lastName' => $claim->field_lastName,
            'email' => $claim->field_email,
            'address' => $claim->field_address,
            'city' => $claim->field_city,
            'state' => $claim->field_state,
            'zipCode' => $claim->field_zipCode,
            'primaryPhone' => $claim->field_primaryPhone,
            'secondaryPhone' => $claim->field_secondaryPhone
          ],
          'details' => [
            'createDate' => $claim->field_createDate,
            'claimAmount' => $claim->field_claimAmountTotal,
            'basis' => $claim->field_claimAmountBasis,
            'departureDate' => $claim->field_departureDate,
            'returnDate' => $claim->field_returnDate,
            'servicesPurchased' => $claim->field_servicesPurchased,
            'hasInsurance' => $claim->field_hasInsurance,
            'hasReimbursement' => $claim->field_hasReimbursementSource
          ],
          'passengers' => $passengers,
          'payments' => $payments->toArray(),
          'collaterals' => $collaterals->toArray(),
          'participantId' => $participantId,
          'metadata' => [
            'dateCreated' => $claim->dateCreated,
            'dateUpdated' => $claim->dateUpdated
          ]
        ];
      });

    } catch (\Exception $e) {
      $this->logger->error("Error fetching Craft claims data: " . $e->getMessage());
      $this->logger->error("Craft claims data fetch error", [
        'userId' => $userId,
        'error' => $e->getMessage(),
        'trace' => $e->getTraceAsString()
      ]);
      return collect([]);
    }
  }

  /**
   * Fetch claims data from Laravel database
   */
  protected function getLaravelClaimsData($userId)
  {
    try {
      $claims = DB::table('claims')
        ->where('userId', $userId)
        ->get();

      // Enhance each claim with its related data
      return $claims->map(function ($claim) {
        // Get passengers
        $passengers = DB::table('passengers')
          ->where('claim_id', $claim->id)
          ->get();

        // Get payment history
        $payments = DB::table('payment_history')
          ->where('paymentable_type', 'App\Models\Claim')
          ->where('paymentable_id', $claim->id)
          ->get();

        // Get collaterals
        $collaterals = DB::table('collaterals')
          ->where('claim_id', $claim->id)
          ->get();

        // Return in same format as Craft data
        return [
          'claimId' => $claim->claimId,
          'status' => $claim->claimStatus,
          'paymentStatus' => $claim->paymentStatus,
          'claimant' => [
            'firstName' => $claim->firstName,
            'middleName' => $claim->middleName,
            'lastName' => $claim->lastName,
            'email' => $claim->email,
            'address' => $claim->address,
            'city' => $claim->city,
            'state' => $claim->state,
            'zipCode' => $claim->zipCode,
            'primaryPhone' => $claim->primaryPhone,
            'secondaryPhone' => $claim->secondaryPhone
          ],
          'details' => [
            'createDate' => $claim->createDate,
            'claimAmount' => $claim->claimAmountTotal,
            'basis' => $claim->claimAmountBasis,
            'departureDate' => $claim->departureDate,
            'returnDate' => $claim->returnDate,
            'servicesPurchased' => $claim->servicesPurchased,
            'hasInsurance' => $claim->hasInsurance,
            'hasReimbursement' => $claim->hasReimbursementSource
          ],
          'passengers' => $passengers->toArray(),
          'payments' => $payments->toArray(),
          'collaterals' => $collaterals->toArray(),
          'metadata' => [
            'dateCreated' => $claim->created_at,
            'dateUpdated' => $claim->updated_at
          ]
        ];
      });

    } catch (\Exception $e) {
      $this->logger->error("Error fetching Laravel claims data: " . $e->getMessage());
      $this->logger->error("Laravel claims data fetch error", [
        'userId' => $userId,
        'error' => $e->getMessage(),
        'trace' => $e->getTraceAsString()
      ]);
      return collect([]);
    }
  }

  protected function verifyParticipantData($craftData, $laravelData)
  {
    if (!$craftData || !$laravelData) {
      $this->logger->error("Cannot verify participant data - missing data from one or both sources");
      return false;
    }

    $this->logger->info("Starting participant data verification");
    $mismatches = [];

    // Core fields verification
    $coreFields = [
      'tcrcId' => [
        'label' => 'TCRC ID',
        'compare' => function ($craft, $laravel) {
          return (string)$craft === (string)$laravel;
        }
      ],
      'sotId' => [
        'label' => 'SOT ID',
        'compare' => function ($craft, $laravel) {
          return (string)$craft === (string)$laravel;
        }
      ],
      'email' => [
        'label' => 'Email',
        'compare' => 'strict'
      ],
      'legalBusinessName' => [
        'label' => 'Business Name',
        'compare' => 'strict'
      ],
      'participantStatus' => [
        'label' => 'Status',
        'compare' => 'strict'
      ],
      'createDate' => [
        'label' => 'Create Date',
        'compare' => function ($craft, $laravel) {
          return date('Y-m-d', strtotime($craft)) === date('Y-m-d', strtotime($laravel));
        }
      ],
      'expireDate' => [
        'label' => 'Expire Date',
        'compare' => function ($craft, $laravel) {
          return date('Y-m-d', strtotime($craft)) === date('Y-m-d', strtotime($laravel));
        }
      ],
      'arcIatanNumber' => [
        'label' => 'ARC/IATAN Number',
        'compare' => 'strict'
      ]
    ];

    foreach ($coreFields as $field => $config) {
      $craftValue = $craftData[$field];
      $laravelValue = $laravelData[$field];

      $matches = $config['compare'] === 'strict'
        ? $craftValue === $laravelValue
        : $config['compare']($craftValue, $laravelValue);

      if (!$matches) {
        $mismatches[] = [
          'field' => $config['label'],
          'craft_value' => $craftValue,
          'laravel_value' => $laravelValue
        ];
      }
    }

    // Verify counts
    $countComparisons = [
      'contacts' => count($craftData['contacts']) !== count($laravelData['contacts']),
      'locations' => count($craftData['locations']) !== count($laravelData['locations']),
      'sotRecords' => count($craftData['sotRecords']) !== count($laravelData['sotRecords'])
    ];

    foreach ($countComparisons as $type => $hasMismatch) {
      if ($hasMismatch) {
        $this->logger->warning("Count mismatch in {$type}", [
          'craft_count' => count($craftData[$type]),
          'laravel_count' => count($laravelData[$type])
        ]);
      }
    }

    // Verify SOT records
    $sotMismatches = $this->verifySotRecords($laravelData['id'], $craftData['sotRecords']);
    if (!empty($sotMismatches)) {
      $this->logger->warning("SOT record mismatches found", [
        'participant_id' => $laravelData['id'],
        'mismatches' => $sotMismatches
      ]);
      $mismatches = array_merge($mismatches, $sotMismatches);
    }

    if (!empty($mismatches)) {
      $this->logger->warning("Participant data verification failed", [
        'mismatches' => $mismatches,
        'tcrc_id' => $craftData['tcrcId']
      ]);
      return false;
    }

    $this->logger->info("Participant data verification passed");
    return true;
  }

  protected function verifyClaimsData($craftClaims, $laravelClaims)
  {
    $this->logger->info("Starting claims data verification");

    if ($craftClaims->count() !== $laravelClaims->count()) {
      $this->logger->warning("Claims count mismatch", [
        'craft_count' => $craftClaims->count(),
        'laravel_count' => $laravelClaims->count()
      ]);
    }

    $verifiedCount = 0;
    $mismatches = [];

    foreach ($craftClaims as $craftClaim) {
      $laravelClaim = $laravelClaims->firstWhere('claimId', $craftClaim['claimId']);

      if (!$laravelClaim) {
        $this->logger->warning("Missing claim in Laravel", [
          'claim_id' => $craftClaim['claimId']
        ]);
        continue;
      }

      // Verify core claim data
      $claimMismatches = $this->verifyClaimDetails($craftClaim, $laravelClaim);

      $insuranceMismatches = [];
      //dd($laravelClaim);
      $insuranceMismatches = $this->verifyInsuranceDetails(
        $craftClaim['craftId'],
        $laravelClaim['claimId']
      );

      if (!empty($coreMismatches) || !empty($insuranceMismatches)) {
        $this->logger->warning("Claim verification failed", [
          'claim_id' => $craftClaim['claimId'],
          'core_mismatches' => $claimMismatches,
          'insurance_mismatches' => $insuranceMismatches
        ]);
      }

      // Verify related data
      $passengerMismatches = $this->verifyPassengers($craftClaim['passengers'], $laravelClaim['passengers']);
      $paymentMismatches = $this->verifyPayments($craftClaim['payments'], $laravelClaim['payments']);
      $collateralMismatches = $this->verifyCollaterals($craftClaim['collaterals'], $laravelClaim['collaterals']);

      if (!empty($claimMismatches) || !empty($passengerMismatches) ||
        !empty($paymentMismatches) || !empty($collateralMismatches)) {

        $mismatches[$craftClaim['claimId']] = [
          'core' => $claimMismatches,
          'passengers' => $passengerMismatches,
          'payments' => $paymentMismatches,
          'collaterals' => $collateralMismatches
        ];

        $this->logger->warning("Mismatches found in claim", [
          'claim_id' => $craftClaim['claimId'],
          'mismatches' => $mismatches[$craftClaim['claimId']]
        ]);
      } else {
        $verifiedCount++;
      }
    }

    $this->logger->info("Claims verification completed", [
      'total_claims' => $craftClaims->count(),
      'verified_claims' => $verifiedCount,
      'mismatched_claims' => count($mismatches)
    ]);

    return empty($mismatches);
  }


  private function verifyInsuranceDetails($craftClaimId, $laravelClaimId)
  {
    $mismatches = [];

    $craftInsurance = DB::connection('craft')
      ->table('content')
      ->where('elementId', $craftClaimId)
      ->select([
        'elementId as tcrcId',
        'field_insurancePurchaseDate',
        'field_insurancePurchaseAmount',
        'field_insurancePurchasedFrom',
        'field_insurer',
        'field_insurerFirstName',
        'field_insurerLastName',
        'field_insurerAddress',
        'field_insurerCity',
        'field_insurerState',
        'field_insurerZipCode',
        'field_insuranceSellerFirstName',
        'field_insuranceSellerLastName',
        'field_insuranceSellerAddress',
        'field_insuranceSellerCity',
        'field_insuranceSellerState',
        'field_insuranceSellerZipCode'
      ])
      ->first();

    $laravelInsurance = DB::table('insurances')
      ->where('claim_id', $laravelClaimId)
      ->first();

    if (!$craftInsurance || !$laravelInsurance) {
      return [['type' => 'missing_insurance_record']];
    }

    // Verify tcrcId matches
    if ($craftInsurance->tcrcId != $laravelInsurance->tcrcId) {
      $mismatches[] = [
        'field' => 'tcrcId',
        'craft_value' => $craftInsurance->tcrcId,
        'laravel_value' => $laravelInsurance->tcrcId
      ];
    }

    $fieldsToCompare = [
      'purchase_date' => 'field_insurancePurchaseDate',
      'purchase_amount' => 'field_insurancePurchaseAmount',
      'purchased_from' => 'field_insurancePurchasedFrom',
      'insurer_name' => 'field_insurer',
      'insurer_first_name' => 'field_insurerFirstName',
      'insurer_last_name' => 'field_insurerLastName',
      'insurer_address' => 'field_insurerAddress',
      'insurer_city' => 'field_insurerCity',
      'insurer_state' => 'field_insurerState',
      'insurer_zip_code' => 'field_insurerZipCode',
      'seller_first_name' => 'field_insuranceSellerFirstName',
      'seller_last_name' => 'field_insuranceSellerLastName',
      'seller_address' => 'field_insuranceSellerAddress',
      'seller_city' => 'field_insuranceSellerCity',
      'seller_state' => 'field_insuranceSellerState',
      'seller_zip_code' => 'field_insuranceSellerZipCode'
    ];

    foreach ($fieldsToCompare as $laravelField => $craftField) {
      if ($this->formatValue2($laravelInsurance->$laravelField) !==
        $this->formatValue2($craftInsurance->$craftField)) {
        $mismatches[] = [
          'field' => $laravelField,
          'craft_value' => $craftInsurance->$craftField,
          'laravel_value' => $laravelInsurance->$laravelField
        ];
      }
    }

    return $mismatches;
  }

  private function formatValue2($value)
  {
    if (is_null($value)) return null;
    if (is_numeric($value)) return (string)$value;
    return trim((string)$value);
  }


  private function verifyClaimDetails($craftClaim, $laravelClaim)
  {
    $mismatches = [];
    $fieldsToCheck = [
      'status' => 'Status',
      'paymentStatus' => 'Payment Status',
      'details.claimAmount' => 'Claim Amount',
      'details.departureDate' => 'Departure Date',
      'details.returnDate' => 'Return Date',
      'claimant.firstName' => 'First Name',
      'claimant.lastName' => 'Last Name',
      'claimant.email' => 'Email',
      'details.servicesPurchased' => 'Services Purchased',
      'details.hasInsurance' => 'Has Insurance',
      'details.hasReimbursement' => 'Has Reimbursement'
    ];

    foreach ($fieldsToCheck as $field => $label) {
      $craftValue = data_get($craftClaim, $field);
      $laravelValue = data_get($laravelClaim, $field);

      // Special handling for monetary values
      if (strpos($field, 'Amount') !== false) {
        $craftValue = number_format((float)$craftValue, 2);
        $laravelValue = number_format((float)$laravelValue, 2);
      }

      // Special handling for dates
      if (strpos($field, 'Date') !== false) {
        $craftValue = $craftValue ? date('Y-m-d', strtotime($craftValue)) : null;
        $laravelValue = $laravelValue ? date('Y-m-d', strtotime($laravelValue)) : null;
      }

      // Special handling for boolean values
      if (is_bool($craftValue) || is_bool($laravelValue)) {
        $craftValue = (bool)$craftValue;
        $laravelValue = (bool)$laravelValue;
      }

      if ($craftValue !== $laravelValue) {
        $mismatches[] = [
          'field' => $label,
          'craft' => $craftValue ?? 'null',
          'laravel' => $laravelValue ?? 'null'
        ];
      }
    }

    return $mismatches;
  }

  /**
   * Helper method to verify passengers
   */
  private function verifyPassengers($craftPassengers, $laravelPassengers)
  {
    $mismatches = [];

    if (count($craftPassengers) !== count($laravelPassengers)) {
      $mismatches[] = [
        'field' => 'Passenger Count',
        'craft' => count($craftPassengers),
        'laravel' => count($laravelPassengers)
      ];
    }


    // Create arrays of passenger full names for comparison
    $craftNames = collect($craftPassengers)->map(function ($passenger) {
      return trim("{$passenger['col1']} {$passenger['col2']} {$passenger['col3']}");
    })->sort()->values()->toArray();

    $laravelNames = collect($laravelPassengers)->map(function ($passenger) {
      return trim("{$passenger->firstName} {$passenger->middleName} {$passenger->lastName}");
    })->sort()->values()->toArray();

    // Compare passenger lists
    foreach ($craftNames as $index => $craftName) {
      if (!isset($laravelNames[$index]) || $craftName !== $laravelNames[$index]) {
        $mismatches[] = [
          'field' => "Passenger " . ($index + 1),
          'craft' => $craftName,
          'laravel' => $laravelNames[$index] ?? 'Missing'
        ];
      }
    }

    return $mismatches;
  }

  /**
   * Helper method to verify payments
   */
  private function verifyPayments($craftPayments, $laravelPayments)
  {
    $mismatches = [];

    if (count($craftPayments) !== count($laravelPayments)) {
      $mismatches[] = [
        'field' => 'Payment Count',
        'craft' => count($craftPayments),
        'laravel' => count($laravelPayments)
      ];
    }

    // Create a unique key for each payment for comparison
    $craftPaymentMap = collect($craftPayments)->keyBy(function ($payment) {
      return $payment->field_payment_checkNumber . '-' . $payment->field_payment_paidDate;
    });

    $laravelPaymentMap = collect($laravelPayments)->keyBy(function ($payment) {
      return $payment->checkNumber . '-' . $payment->paidDate;
    });

    // Check for missing payments in either system
    $craftKeys = $craftPaymentMap->keys();
    $laravelKeys = $laravelPaymentMap->keys();

    $missingInLaravel = $craftKeys->diff($laravelKeys);
    $missingInCraft = $laravelKeys->diff($craftKeys);

    foreach ($missingInLaravel as $key) {
      $payment = $craftPaymentMap[$key];
      $mismatches[] = [
        'field' => "Missing Payment",
        'craft' => "Check #{$payment->field_payment_checkNumber} - {$payment->field_payment_paidDate}",
        'laravel' => 'Not Found'
      ];
    }

    foreach ($missingInCraft as $key) {
      $payment = $laravelPaymentMap[$key];
      $mismatches[] = [
        'field' => "Missing Payment",
        'craft' => 'Not Found',
        'laravel' => "Check #{$payment->checkNumber} - {$payment->paidDate}"
      ];
    }

    // Compare payment details for payments that exist in both systems
    foreach ($craftPaymentMap as $key => $craftPayment) {
      if ($laravelPaymentMap->has($key)) {
        $laravelPayment = $laravelPaymentMap[$key];

        // Compare amounts
        if (number_format($craftPayment->field_payment_totalAmount, 2) !==
          number_format($laravelPayment->totalAmount, 2)) {
          $mismatches[] = [
            'field' => "Payment Amount (Check #{$craftPayment->field_payment_checkNumber})",
            'craft' => number_format($craftPayment->field_payment_totalAmount, 2),
            'laravel' => number_format($laravelPayment->totalAmount, 2)
          ];
        }

        // Compare dates
        $craftDate = date('Y-m-d', strtotime($craftPayment->field_payment_paidDate));
        $laravelDate = date('Y-m-d', strtotime($laravelPayment->paidDate));
        if ($craftDate !== $laravelDate) {
          $mismatches[] = [
            'field' => "Payment Date (Check #{$craftPayment->field_payment_checkNumber})",
            'craft' => $craftDate,
            'laravel' => $laravelDate
          ];
        }
      }
    }

    return $mismatches;
  }

  /**
   * Helper method to verify collaterals
   */
  private function verifyCollaterals($craftCollaterals, $laravelCollaterals)
  {
    $mismatches = [];

    if (count($craftCollaterals) !== count($laravelCollaterals)) {
      $mismatches[] = [
        'field' => 'Collateral Count',
        'craft' => count($craftCollaterals),
        'laravel' => count($laravelCollaterals)
      ];
    }

    // Create arrays of filenames for comparison
    $craftFiles = collect($craftCollaterals)->map(function ($collateral) {
      return [
        'name' => $collateral->field_collaterals_fileName,
        'date' => date('Y-m-d', strtotime($collateral->field_collaterals_createDate))
      ];
    })->sortBy('name')->values()->toArray();

    $laravelFiles = collect($laravelCollaterals)->map(function ($collateral) {
      return [
        'name' => $collateral->fileName,
        'date' => date('Y-m-d', strtotime($collateral->createDate))
      ];
    })->sortBy('name')->values()->toArray();

    // Compare collateral files
    foreach ($craftFiles as $index => $craftFile) {
      if (!isset($laravelFiles[$index]) ||
        $craftFile['name'] !== $laravelFiles[$index]['name'] ||
        $craftFile['date'] !== $laravelFiles[$index]['date']) {
        $mismatches[] = [
          'field' => "Collateral " . ($index + 1),
          'craft' => "{$craftFile['name']} ({$craftFile['date']})",
          'laravel' => isset($laravelFiles[$index]) ?
            "{$laravelFiles[$index]['name']} ({$laravelFiles[$index]['date']})" :
            'Missing'
        ];
      }
    }

    return $mismatches;
  }

  /**
   * Helper method to format values for comparison
   */
  private function formatValue($value, $type = null)
  {
    if ($value === null) {
      return 'null';
    }

    switch ($type) {
      case 'money':
        return number_format((float)$value, 2);
      case 'date':
        return $value ? date('Y-m-d', strtotime($value)) : null;
      case 'boolean':
        return $value ? 'Yes' : 'No';
      default:
        return (string)$value;
    }
  }


  protected function getCraftParticipantData($userId)
  {
    try {
      // Get main participant entry
      $participant = DB::connection('craft')
        ->table('elements')
        ->join('relations', 'elements.id', '=', 'relations.targetId')
        ->join('content', 'elements.id', '=', 'content.elementId')
        ->join('entries', 'elements.id', '=', 'entries.id')
        ->join('sections', 'entries.sectionId', '=', 'sections.id')
        ->where('sections.handle', 'participant_business')
        ->where('relations.sourceId', $userId)
        ->where('elements.type', 'craft\elements\Entry')
        ->whereNull('elements.dateDeleted')
        ->select([
          'elements.id as craftId',
          'elements.dateCreated',
          'elements.dateUpdated',
          'content.field_tcrcId',
          'content.field_sotId',
          'content.field_expireDate',
          'content.field_createDate',
          'content.field_email',
          'content.field_legalBusinessName',
          'content.field_legalBusinessOwnerFirstName',
          'content.field_legalBusinessOwnerLastName',
          'content.field_legalBusinessStartDate',
          'content.field_participantStatus',
          'content.field_arcIatanNumber',
          'content.field_isPendingPayment',
          'content.field_isPendingRenewal',
          'content.field_isBoardMember',
          'content.field_hasAcceptedTerms',
          'content.field_legacyModifyDate',
          'content.field_legacyUserName',
          'content.field_legacyUserid'
        ])
        ->first();

      if (!$participant) {
        $this->logger->warning("No participant found in Craft for user ID: $userId");
        return null;
      }

      $this->logger->info("Found participant", [
        'craftId' => $participant->craftId,
        'tcrcId' => $participant->field_tcrcId,
        'businessName' => $participant->field_legalBusinessName
      ]);

      // Get all primary locations
      $primaryLocations = DB::connection('craft')
        ->table('matrixblocks as mb')
        ->join('elements as e', 'mb.id', '=', 'e.id')
        ->join('matrixcontent_primarylocation as mpl', 'mb.id', '=', 'mpl.elementId')
        ->where('mb.ownerId', $participant->craftId)
        ->where('mb.fieldId', $this->participantFetcher->primaryLocationFieldId)
        ->where('e.enabled', 1)
        ->where('e.archived', 0)
        ->whereNull('e.dateDeleted')
        ->select([
          'mb.id',
          'mpl.field_location_agencyName',
          'mpl.field_location_businessStartDate',
          'mpl.field_location_address',
          'mpl.field_location_city',
          'mpl.field_location_state',
          'mpl.field_location_zipCode',
          'mpl.field_location_phone',
          'mpl.field_location_fax',
          'mpl.field_location_isPrimary_eqqbdkqc as isPrimary',
          'mpl.field_location_isMailing_lwyddbnc as isMailing',
          'mb.dateCreated',
          'mb.dateUpdated'
        ])
        ->get();

      // Get contact information
      $contacts = DB::connection('craft')
        ->table('matrixblocks as mb')
        ->join('elements as e', 'mb.id', '=', 'e.id')
        ->join('matrixcontent_contactinformation as mc', 'mb.id', '=', 'mc.elementId')
        ->where('mb.ownerId', $participant->craftId)
        ->where('mb.fieldId', $this->participantFetcher->matrixFieldId)
        ->where('e.enabled', 1)
        ->where('e.archived', 0)
        ->whereNull('e.dateDeleted')
        ->select([
          'mb.id',
          'mc.field_blockcontact_firstName',
          'mc.field_blockcontact_middleName',
          'mc.field_blockcontact_lastName',
          'mc.field_blockcontact_emailAddress',
          'mc.field_blockcontact_phoneNumber',
          'mc.field_blockcontact_faxNumber',
          'mc.field_blockcontact_contactTitle',
          'mc.field_blockcontact_primaryContact',
          'mc.field_blockcontact_isInactive',
          'mc.field_blockcontact_adminNotes',
          'mb.dateCreated',
          'mb.dateUpdated'
        ])
        ->get();

      // Get additional locations
      $additionalLocations = DB::connection('craft')
        ->table('matrixblocks as mb')
        ->join('elements as e', 'mb.id', '=', 'e.id')
        ->join('matrixcontent_locations as ml', 'mb.id', '=', 'ml.elementId')
        ->where('mb.ownerId', $participant->craftId)
        ->where('mb.fieldId', $this->participantFetcher->additionalLocationsFieldId)
        ->where('e.enabled', 1)
        ->where('e.archived', 0)
        ->whereNull('e.dateDeleted')
        ->select([
          'mb.id',
          'ml.field_location_agencyName',
          'ml.field_location_businessStartDate',
          'ml.field_location_address',
          'ml.field_location_city',
          'ml.field_location_state',
          'ml.field_location_zipCode',
          'ml.field_location_phone',
          'ml.field_location_fax',
          'ml.field_location_isPrimary as isPrimary',
          'ml.field_location_isMailing as isMailing',
          'mb.dateCreated',
          'mb.dateUpdated'
        ])
        ->get();

      // Get SOT records
      $sotRecords = DB::connection('craft')
        ->table('matrixblocks as mb')
        ->join('elements as e', 'mb.id', '=', 'e.id')
        ->join('matrixcontent_sot as ms', 'mb.id', '=', 'ms.elementId')
        ->where('mb.ownerId', $participant->craftId)
        ->where('mb.fieldId', $this->participantFetcher->sotFieldId)
        ->where('e.enabled', 1)
        ->where('e.archived', 0)
        ->whereNull('e.dateDeleted')
        ->select([
          'mb.id',
          'ms.id as sotLegacyId',
          'ms.field_blocksot_sotId',
          'ms.field_blocksot_sotOrgId',
          'ms.field_blocksot_registrationExpirationDate',
          'ms.field_blocksot_sotApprovedDate',
          'ms.field_blocksot_sotStatus',
          'ms.field_blocksot_isInitialFiling',
          'ms.field_blocksot_note',
          'ms.field_blocksot_manualCorrection',
          'mb.dateCreated',
          'mb.dateUpdated'
        ])
        ->get();

      // Get notes
      $notes = DB::connection('craft')
        ->table('matrixblocks as mb')
        ->join('elements as e', 'mb.id', '=', 'e.id')
        ->join('matrixcontent_notes as mn', 'mb.id', '=', 'mn.elementId')
        ->where('mb.ownerId', $participant->craftId)
        ->where('e.enabled', 1)
        ->where('e.archived', 0)
        ->whereNull('e.dateDeleted')
        ->select([
          'mb.id',
          'mn.field_note_note',
          'mn.field_note_date',
          'mb.dateCreated',
          'mb.dateUpdated'
        ])
        ->orderBy('mn.field_note_date', 'desc')
        ->get();

      // Combine all locations
      $allLocations = collect();

      // Add primary locations
      foreach ($primaryLocations as $location) {
        $allLocations->push([
          'id' => $location->id,
          'agencyName' => $location->field_location_agencyName,
          'businessStartDate' => $location->field_location_businessStartDate,
          'address' => $location->field_location_address,
          'city' => $location->field_location_city,
          'state' => $location->field_location_state,
          'zipCode' => $location->field_location_zipCode,
          'phone' => $location->field_location_phone,
          'fax' => $location->field_location_fax,
          'isPrimary' => $location->isPrimary,
          'isMailing' => $location->isMailing,
          'locationType' => 'primary',
          'created_at' => $location->dateCreated,
          'updated_at' => $location->dateUpdated
        ]);
      }

      // Add additional locations
      foreach ($additionalLocations as $location) {
        $allLocations->push([
          'id' => $location->id,
          'agencyName' => $location->field_location_agencyName,
          'businessStartDate' => $location->field_location_businessStartDate,
          'address' => $location->field_location_address,
          'city' => $location->field_location_city,
          'state' => $location->field_location_state,
          'zipCode' => $location->field_location_zipCode,
          'phone' => $location->field_location_phone,
          'fax' => $location->field_location_fax,
          'isPrimary' => $location->isPrimary,
          'isMailing' => $location->isMailing,
          'locationType' => 'additional',
          'created_at' => $location->dateCreated,
          'updated_at' => $location->dateUpdated
        ]);
      }
      //dd($allLocations);

      // Log data collection results
      $this->logger->info("Collected participant related data", [
        'primary_locations' => $primaryLocations->count(),
        'additional_locations' => $additionalLocations->count(),
        'contacts' => $contacts->count(),
        'sot_records' => $sotRecords->count(),
        'notes' => $notes->count()
      ]);

      // Return structured participant data
      return [
        'userId' => $userId,
        'craftId' => $participant->craftId,
        'tcrcId' => $participant->field_tcrcId,
        'sotId' => $participant->field_sotId,
        'email' => $participant->field_email,
        'legalBusinessName' => $participant->field_legalBusinessName,
        'participantStatus' => $participant->field_participantStatus,
        'createDate' => $participant->field_createDate,
        'expireDate' => $participant->field_expireDate,
        'businessOwner' => [
          'firstName' => $participant->field_legalBusinessOwnerFirstName,
          'lastName' => $participant->field_legalBusinessOwnerLastName,
          'businessStartDate' => $participant->field_legalBusinessStartDate
        ],
        'arcIatanNumber' => $participant->field_arcIatanNumber,
        'contacts' => $contacts->map(function ($contact) {
          return [
            'id' => $contact->id,
            'firstName' => $contact->field_blockcontact_firstName,
            'middleName' => $contact->field_blockcontact_middleName,
            'lastName' => $contact->field_blockcontact_lastName,
            'email' => $contact->field_blockcontact_emailAddress,
            'phone' => $contact->field_blockcontact_phoneNumber,
            'fax' => $contact->field_blockcontact_faxNumber,
            'title' => $contact->field_blockcontact_contactTitle,
            'isPrimary' => $contact->field_blockcontact_primaryContact,
            'isInactive' => $contact->field_blockcontact_isInactive,
            'adminNotes' => $contact->field_blockcontact_adminNotes,
            'created_at' => $contact->dateCreated,
            'updated_at' => $contact->dateUpdated
          ];
        })->toArray(),
        'locations' => $allLocations->toArray(),
        'sotRecords' => $sotRecords->map(function ($sot) {
          return [
            'id' => $sot->sotLegacyId,
            'sotId' => $sot->field_blocksot_sotId,
            'sotOrgId' => $sot->field_blocksot_sotOrgId,
            'expirationDate' => $sot->field_blocksot_registrationExpirationDate,
            'approvedDate' => $sot->field_blocksot_sotApprovedDate,
            'status' => $sot->field_blocksot_sotStatus,
            'isInitialFiling' => $sot->field_blocksot_isInitialFiling,
            'note' => $sot->field_blocksot_note,
            'manualCorrection' => $sot->field_blocksot_manualCorrection,
            'created_at' => $sot->dateCreated,
            'updated_at' => $sot->dateUpdated
          ];
        })->toArray(),
        'notes' => $notes->map(function ($note) {
          return [
            'id' => $note->id,
            'note' => $note->field_note_note,
            'date' => $note->field_note_date,
            'created_at' => $note->dateCreated,
            'updated_at' => $note->dateUpdated
          ];
        })->toArray(),
        'metadata' => [
          'dateCreated' => $participant->dateCreated,
          'dateUpdated' => $participant->dateUpdated,
          'isPendingPayment' => $participant->field_isPendingPayment,
          'isPendingRenewal' => $participant->field_isPendingRenewal,
          'isBoardMember' => $participant->field_isBoardMember,
          'hasAcceptedTerms' => $participant->field_hasAcceptedTerms,
          'legacyData' => [
            'modifyDate' => $participant->field_legacyModifyDate,
            'userName' => $participant->field_legacyUserName,
            'userId' => $participant->field_legacyUserid
          ]
        ]
      ];

    } catch (\Exception $e) {
      $this->logger->error("Error fetching Craft participant data", [
        'userId' => $userId,
        'error' => $e->getMessage(),
        'trace' => $e->getTraceAsString()
      ]);
      throw $e;
    }
  }

  /**
   * Fetch participant data from Laravel database
   */
  protected function getLaravelParticipantData($userId)
  {
    try {
      // Get main participant data
      $participant = DB::table('participants')
        ->where('userId', $userId)
        ->first();

      if (!$participant) {
        $this->warn("No participant found in Laravel for user ID: $userId");
        return null;
      }

      // Get contacts
      $contacts = DB::table('contact_information')
        ->where('participant_id', $participant->id)
        ->get();

      // Get locations
      $locations = DB::table('locations')
        ->where('participant_id', $participant->id)
        ->get();

      // Get SOT records
      $sotRecords = DB::table('sot')
        ->where('participant_id', $participant->id)
        ->get();

      // Transform into same format as Craft data for comparison
      return [
        'tcrcId' => $participant->tcrcId,
        'id' => $participant->id,
        'sotId' => $participant->sotId,
        'email' => $participant->email,
        'legalBusinessName' => $participant->legalBusinessName,
        'participantStatus' => $participant->participantStatus,
        'createDate' => $participant->createDate,
        'expireDate' => $participant->expireDate,
        'businessOwner' => [
          'firstName' => $participant->legalBusinessOwnerFirstName,
          'lastName' => $participant->legalBusinessOwnerLastName
        ],
        'arcIatanNumber' => $participant->arcIatanNumber,
        'contacts' => $contacts->map(function ($contact) {
          return [
            'firstName' => $contact->firstName,
            'middleName' => $contact->middleName,
            'lastName' => $contact->lastName,
            'email' => $contact->emailAddress,
            'phone' => $contact->phoneNumber,
            'fax' => $contact->faxNumber,
            'title' => $contact->contactTitle,
            'isPrimary' => $contact->primaryContact,
            'isInactive' => $contact->isInactive
          ];
        })->toArray(),
        'locations' => $locations->map(function ($location) {
          return [
            'agencyName' => $location->agencyName,
            'address' => $location->address,
            'city' => $location->city,
            'state' => $location->state,
            'zipCode' => $location->zipCode,
            'phone' => $location->phone,
            'fax' => $location->fax,
            'isPrimary' => $location->isPrimary,
            'isMailing' => $location->isMailing
          ];
        })->toArray(),
        'sotRecords' => $sotRecords->map(function ($sot) {
          return [
            'sotId' => $sot->sotId,
            'sotOrgId' => $sot->sotOrgId,
            'expirationDate' => $sot->registrationExpirationDate,
            'approvedDate' => $sot->sotApprovedDate,
            'status' => $sot->sotStatus,
            'isInitialFiling' => $sot->isInitialFiling
          ];
        })->toArray(),
        'metadata' => [
          'dateCreated' => $participant->created_at,
          'dateUpdated' => $participant->updated_at,
          'isPendingPayment' => $participant->isPendingPayment,
          'isPendingRenewal' => $participant->isPendingRenewal,
          'isBoardMember' => $participant->isBoardMember,
          'hasAcceptedTerms' => $participant->hasAcceptedTerms
        ]
      ];

    } catch (\Exception $e) {
      $this->logger->error("Error fetching Laravel participant data: " . $e->getMessage());
      $this->logger->error("Laravel participant data fetch error", [
        'userId' => $userId,
        'error' => $e->getMessage(),
        'trace' => $e->getTraceAsString()
      ]);
      return null;
    }
  }

  protected function migrateUserData($userId, $isDryRun)
  {
    try {
      $this->logger->info("Starting user migration", ['dry_run' => $isDryRun]);
      DB::beginTransaction();

      // 1. Migrate user
      $userData = $this->migrateUser($userId, $isDryRun);
      if (!$userData || !isset($userData['user_id'])) {
        DB::rollBack();
        $this->logger->error("User migration failed", ['user_id' => $userId]);
        return false;
      }

      if (!$isDryRun) {
        $this->logMigrationOperation('user_migration', 'success', ['user_id' => $userId]);
      }

      // 2. Migrate participant if exists
      $craftParticipant = $this->getCraftParticipantData($userId);
      //  dd($craftParticipant);
      if ($craftParticipant) {
        $participantData = $this->migrateParticipantData($userId, $isDryRun);
        if ($participantData && isset($participantData['participant_id'])) {
          $this->logMigrationOperation('participant_migration', 'success', [
            'participant_id' => $participantData['participant_id']
          ]);
        }
      }

      // 3. Migrate claims
      $this->migrateClaimsData($userId, $isDryRun);
      $this->logMigrationOperation('claim_migration', 'success', [

      ]);

      if ($isDryRun) {
        DB::rollBack();
        $this->logger->info("Dry run completed successfully");
      } else {
        DB::commit();
        $this->logger->info("Migration committed successfully");

        // Run post-migration validation
        $this->runPostMigrationValidation($userId);
      }

      return true;

    } catch (\Exception $e) {
      DB::rollBack();
      $this->logger->error("Migration failed", [
        'error' => $e->getMessage(),
        'trace' => $e->getTraceAsString()
      ]);
      throw $e;
    }
  }


  public function displayParticipant($elementsId)
  {
    try {
      // Get the relation from relations table first
      $relation = DB::connection('craft')
        ->table('relations')
        ->where('sourceId', $elementsId)
        ->where('fieldId', function ($query) {
          $query->select('id')
            ->from('fields')
            ->where('handle', 'participant')
            ->limit(1);
        })
        ->first();

      if (!$relation) {
        $this->logger->info("\nNo participant found.");
        return;
      }

      // Get participant organization details
      $participant = DB::connection('craft')
        ->table('entries as e')
        ->join('content as c', 'c.elementId', '=', 'e.id')
        ->where('e.id', $relation->targetId)
        ->select('c.field_legalBusinessName', 'c.field_tcrcId')
        ->first();

      //dd($participant->field_tcrcId);

      if (!$participant) {
        return null;
      }

      // Get the Laravel participant ID using the TCRC ID
      $laravelParticipant = DB::table('participants')
        ->where('tcrcId', $participant->field_tcrcId)
        ->first();

      return $laravelParticipant ? $laravelParticipant->id : null;
    } catch (\Exception $e) {
      $this->logger->error("Error getting participant ID for claim", [
        'elementsId' => $elementsId,
        'error' => $e->getMessage()
      ]);
      return null;
    }
  }


  private function getParticipantIdForClaim($elementsId)
  {
    try {
      // Get the relation from relations table first
      $relation = DB::connection('craft')
        ->table('relations')
        ->where('sourceId', $elementsId)
        ->where('fieldId', function ($query) {
          $query->select('id')
            ->from('fields')
            ->where('handle', 'participant')
            ->limit(1);
        })
        ->first();

      if (!$relation) {
        return null;
      }

      // Get participant details
      $participant = DB::connection('craft')
        ->table('entries as e')
        ->join('content as c', 'c.elementId', '=', 'e.id')
        ->where('e.id', $relation->targetId)
        ->select('c.field_tcrcId')
        ->first();

      if (!$participant) {
        return null;
      }

      // Get the Laravel participant ID using the TCRC ID
      $laravelParticipant = DB::table('participants')
        ->where('tcrcId', $participant->field_tcrcId)
        ->first();

      return $laravelParticipant ? $laravelParticipant->id : null;

    } catch (\Exception $e) {
      $this->logger->error("Error getting participant ID for claim", [
        'elementsId' => $elementsId,
        'error' => $e->getMessage()
      ]);
      return null;
    }
  }

  private function processParticipantPaymentHistory($participantId, $craftId)
  {
    try {

      $payments = DB::connection('craft')
        ->table('matrixblocks as mb')
        ->join('matrixcontent_paymenthistory as mph', 'mb.id', '=', 'mph.elementId')
        ->join('elements as e', 'mb.id', '=', 'e.id')
        ->where('mb.ownerId', $craftId)
        ->where('e.enabled', 1)
        ->where('e.archived', 0)
        ->whereNull('e.dateDeleted')
        ->select([
          'mb.id as legacyId',
          'mph.field_payment_paymentTypeName',
          'mph.field_payment_paymentForType',
          'mph.field_payment_paidDate',
          'mph.field_payment_expireDate',
          'mph.field_payment_createDate',
          'mph.field_payment_assessmentFee',
          'mph.field_payment_lateFee',
          'mph.field_payment_totalFee',
          'mph.field_payment_subtotalAmount',
          'mph.field_payment_totalAmount',
          'mph.field_payment_ccAuthNumber',
          'mph.field_payment_ccErrorCode',
          'mph.field_payment_ccErrorText',
          'mph.field_payment_checkNumber',
          'mph.field_payment_checkAmount',
          'mph.field_payment_checkDate',
          'mph.field_payment_checkClearedDate',
          'mph.field_payment_checkBouncedDate',
          'mph.field_payment_note',
          'mph.field_payment_numberOfLocations',
          'mph.field_payment_emergencyPaymentReferenceId',
          'mph.field_payment_manualCorrection',
          'mb.dateCreated',
          'mb.dateUpdated'
        ])
        ->get();

      foreach ($payments as $payment) {
        $paymentData = [
          'tcrcId' => $payment->legacyId,
          'paymentable_type' => 'App\Models\Participant',
          'paymentable_id' => $participantId,
          'paymentTypeName' => $payment->field_payment_paymentTypeName,
          'paymentForType' => $payment->field_payment_paymentForType,
          'paidDate' => $payment->field_payment_paidDate,
          'expireDate' => $payment->field_payment_expireDate,
          'createDate' => $payment->field_payment_createDate,
          'assessmentFee' => $this->formatDecimal($payment->field_payment_assessmentFee),
          'lateFee' => $this->formatDecimal($payment->field_payment_lateFee),
          'totalFee' => $this->formatDecimal($payment->field_payment_totalFee),
          'subtotalAmount' => $this->formatDecimal($payment->field_payment_subtotalAmount),
          'totalAmount' => $this->formatDecimal($payment->field_payment_totalAmount),
          'ccAuthNumber' => $payment->field_payment_ccAuthNumber,
          'ccErrorCode' => $payment->field_payment_ccErrorCode,
          'ccErrorText' => $payment->field_payment_ccErrorText,
          'checkNumber' => $payment->field_payment_checkNumber,
          'checkAmount' => $this->formatDecimal($payment->field_payment_checkAmount),
          'checkDate' => $payment->field_payment_checkDate,
          'checkClearedDate' => $payment->field_payment_checkClearedDate,
          'checkBouncedDate' => $payment->field_payment_checkBouncedDate,
          'note' => $payment->field_payment_note,
          'numberOfLocations' => $payment->field_payment_numberOfLocations,
          'emergencyPaymentReferenceId' => $payment->field_payment_emergencyPaymentReferenceId,
          'manualCorrection' => $payment->field_payment_manualCorrection,
          'legacyId' => $payment->legacyId,
          'created_at' => $payment->dateCreated,
          'updated_at' => $payment->dateUpdated
        ];


        $existingPayment = DB::table('payment_history')
          ->where('legacyId', $payment->legacyId)
          ->first();

        if ($existingPayment) {

          DB::table('payment_history')
            ->where('legacyId', $payment->legacyId)
            ->update($paymentData);

          $this->logDbOperation('payment_history', 'update', [
            'legacyId' => $payment->legacyId,
            'participantId' => $participantId
          ]);
        } else {
          DB::table('payment_history')->insert($paymentData);

          $this->logDbOperation('payment_history', 'insert', [
            'legacyId' => $payment->legacyId,
            'participantId' => $participantId
          ]);
        }
      }

      return true;
    } catch (\Exception $e) {
      $this->logger->error("Error processing participant payment history", [
        'participant_id' => $participantId,
        'error' => $e->getMessage(),
        'trace' => $e->getTraceAsString()
      ]);
      return false;
    }
  }

  private function formatDecimal($value)
  {
    if (is_null($value)) return null;
    if (empty($value)) return 0;

    // Remove any non-numeric characters except decimal point
    $value = preg_replace('/[^0-9.]/', '', $value);

    // Format to 2 decimal places
    return number_format((float)$value, 2, '.', '');
  }

  protected function migrateParticipantData($userId, $isDryRun)
  {
    try {
      // Fetch participant data from Craft
      $craftData = $this->getCraftParticipantData($userId);
      //dd($userId, $craftData);

      if (!$craftData) {
        $this->logger->error("No participant data found in Craft for user ID: $userId");
        return false;
      }

      if ($isDryRun) {
        $this->logger->info("Would migrate participant: " . $craftData['legalBusinessName']);
        $this->table(
          ['Field', 'Value'],
          $this->formatParticipantDataForDisplay($craftData)
        );
        return ['participant_id' => null];
      }

      DB::beginTransaction();
      try {
        // 1. Create or update the main participant record
        $participant = $this->createOrUpdateParticipant($userId, $craftData);


        //dd($craftData['locations']);
        // 2. Process primary location
        if (!empty($craftData['locations'])) {
          $primaryLocation = $this->processPrimaryLocation($participant->id, $craftData['locations']);

          // Update participant with primary location reference
          if ($primaryLocation) {
            DB::table('participants')
              ->where('id', $participant->id)
              ->update(['primary_location_id' => $primaryLocation->id]);
          }
        }

        // 3. Process additional locations
        $this->processAdditionalLocations($participant->id, $craftData['locations']);

        $this->processParticipantNotes($participant->id, $craftData['craftId']);
        $this->processParticipantPaymentHistory($participant->id, $craftData['craftId']);


        // 4. Process contacts
        $this->processContacts($participant->id, $craftData['contacts']);

        // 5. Process SOT records
        $this->processSotRecords($participant->id, $craftData['sotRecords']);

        // 6. Process DBA names (if present)
        if (isset($craftData['dbaNames'])) {
          $this->processDbaNames($participant->id, $craftData['dbaNames']);
        }

        DB::commit();

        $this->logger->info("Successfully migrated participant: {$craftData['legalBusinessName']}");
        return ['participant_id' => $participant->id];

      } catch (\Exception $e) {
        DB::rollBack();
        throw $e;
      }

    } catch (\Exception $e) {
      $this->logger->error("Error migrating participant data: " . $e->getMessage());
      $this->logger->error("Participant migration error", [
        'userId' => $userId,
        'error' => $e->getMessage(),
        'trace' => $e->getTraceAsString()
      ]);
      return false;
    }
  }


  private function createOrUpdateParticipant($userId, $craftData)
  {
    try {
      // Verify user exists
      $user = DB::table('users')->find($userId);
      if (!$user) {
        throw new \Exception("User with ID $userId not found in Laravel database");
      }

      // Prepare participant data
      $participantData = [
        'userId' => $userId,
        'tcrcId' => $craftData['tcrcId'],
        'sotId' => $craftData['sotId'],
        'expireDate' => $craftData['expireDate'],
        'createDate' => $craftData['createDate'],
        'email' => $craftData['email'],
        'legalBusinessName' => $craftData['legalBusinessName'],
        'legalBusinessOwnerFirstName' => $craftData['businessOwner']['firstName'],
        'legalBusinessOwnerLastName' => $craftData['businessOwner']['lastName'],
        'legalBusinessStartDate' => $craftData['businessOwner']['businessStartDate'] ?? null,
        'participantStatus' => $craftData['participantStatus'],
        'arcIatanNumber' => $craftData['arcIatanNumber'],
        'isPendingPayment' => $craftData['metadata']['isPendingPayment'] ?? false,
        'isPendingRenewal' => $craftData['metadata']['isPendingRenewal'] ?? false,
        'isBoardMember' => $craftData['metadata']['isBoardMember'] ?? false,
        'hasAcceptedTerms' => $craftData['metadata']['hasAcceptedTerms'] ?? false,
        'updated_at' => $craftData['metadata']['dateUpdated']
      ];


      $existingParticipant = DB::table('participants')
        ->where(function ($query) use ($craftData, $userId) {
          $query->where('tcrcId', $craftData['tcrcId'])
            ->orWhere('userId', $userId);
        })
        ->first();

      if ($existingParticipant) {
        // Handle potential conflicts
        if ($existingParticipant->userId != $userId && $existingParticipant->tcrcId == $craftData['tcrcId']) {
          $this->logger->warning("Participant TCRC ID conflict detected", [
            'tcrcId' => $craftData['tcrcId'],
            'existing_user_id' => $existingParticipant->userId,
            'new_user_id' => $userId
          ]);
        }


        DB::table('participants')
          ->where('id', $existingParticipant->id)
          ->update($participantData);

        $this->logDbOperation('participants', 'update', [
          'id' => $existingParticipant->id,
          'tcrcId' => $craftData['tcrcId'],
          'email' => $craftData['email']
        ]);

        $this->logger->info("Updated existing participant", [
          'participantId' => $existingParticipant->id,
          'tcrcId' => $craftData['tcrcId']
        ]);

        return DB::table('participants')->find($existingParticipant->id);
      } else {

        $participantData['created_at'] = $craftData['metadata']['dateCreated'];
        $participantId = DB::table('participants')->insertGetId($participantData);
        $this->logDbOperation('participants', 'insert', [
          'id' => $participantId,
          'tcrcId' => $craftData['tcrcId'],
          'email' => $craftData['email']
        ]);

        $this->logger->info("Created new participant", [
          'participantId' => $participantId,
          'tcrcId' => $craftData['tcrcId']
        ]);

        return DB::table('participants')->find($participantId);
      }

    } catch (\Exception $e) {
      $this->logger->error("Error creating/updating participant", [
        'userId' => $userId,
        'tcrcId' => $craftData['tcrcId'] ?? null,
        'error' => $e->getMessage(),
        'trace' => $e->getTraceAsString()
      ]);
      throw $e;
    }
  }

  /**
   * Process and create/update primary location
   *
   * @param int $participantId
   * @param array $locations
   * @return object|null
   */
  private function processPrimaryLocation($participantId, $locations)
  {
    $primaryLocation = collect($locations)->first(function ($location) {
      return $location['isPrimary'] === 1;
    });

    if (!$primaryLocation) {
      $this->warn("No primary location found for participant ID: $participantId");
      return null;
    }

    try {
      $locationData = [
        'participant_id' => $participantId,
        'agencyName' => $primaryLocation['agencyName'],
        'businessStartDate' => $primaryLocation['businessStartDate'] ?? null,
        'address' => $primaryLocation['address'],
        'city' => $primaryLocation['city'],
        'state' => $primaryLocation['state'],
        'zipCode' => $primaryLocation['zipCode'],
        'phone' => $primaryLocation['phone'],
        'fax' => $primaryLocation['fax'],
        'legacyId' => $primaryLocation['id'],
        'isPrimary' => true,
        'isMailing' => $primaryLocation['isMailing'] ?? false,
        'updated_at' => now()
      ];

      $locationId = DB::table('locations')->updateOrInsert(
        ['legacyId' => $primaryLocation['id']],
        array_merge($locationData, [
          'created_at' => DB::raw('COALESCE(created_at, NOW())')
        ])
      );

      $location = DB::table('locations')
        ->where('legacyId', $primaryLocation['id'])
        ->first();

      $this->logDbOperation('locations', 'upsert', [
        'legacyId' => $primaryLocation['id'],
        'location_id' => $location->id
      ]);

      return $location;

    } catch (\Exception $e) {
      $this->logger->error("Error processing primary location", [
        'participant_id' => $participantId,
        'legacyId' => $primaryLocation['id'],
        'error' => $e->getMessage()
      ]);
      throw $e;
    }
  }

  /**
   * Process and create/update additional locations
   *
   * @param int $participantId
   * @param array $locations
   */
  private function processAdditionalLocations($participantId, $locations)
  {
    try {
      $additionalLocations = collect($locations)->filter(function ($location) {
        return $location['isPrimary'] === 0;
      });

      foreach ($additionalLocations as $location) {
        $locationData = [
          'tcrcId' => $location['id'],
          'participant_id' => $participantId,
          'agencyName' => $location['agencyName'],
          'businessStartDate' => $location['businessStartDate'] ?? null,
          'address' => $location['address'],
          'city' => $location['city'],
          'state' => $location['state'],
          'zipCode' => $location['zipCode'],
          'phone' => $location['phone'],
          'fax' => $location['fax'],
          'legacyId' => $location['id'],
          'isPrimary' => false,
          'isMailing' => $location['isMailing'] ?? false,
          'updated_at' => now()
        ];

        DB::table('locations')->updateOrInsert(
          [
            'tcrcId' => $location['id'],
          ],
          array_merge($locationData, [
            'created_at' => DB::raw('COALESCE(created_at, NOW())')
          ])
        );

        $this->logDbOperation('locations', 'upsert', [
          'tcrcId' => $location['id'],
        ]);
      }

    } catch (\Exception $e) {
      $this->logger->error("Error processing additional locations", [
        'participant_id' => $participantId,
        'error' => $e->getMessage()
      ]);
      throw $e;
    }
  }

  /**
   * Process and create contact records
   */
  private function processContacts($participantId, $contacts)
  {
    foreach ($contacts as $contact) {
      //dd($contact);
      $contactData = [
        'tcrcId' => $contact['id'],
        'participant_id' => $participantId,
        'firstName' => $contact['firstName'],
        'middleName' => $contact['middleName'] ?? null,
        'lastName' => $contact['lastName'],
        'contactTitle' => $contact['title'] ?? null,
        'emailAddress' => $contact['email'],
        'phoneNumber' => $contact['phone'],
        'faxNumber' => $contact['fax'] ?? null,
        'isInactive' => $contact['isInactive'] ?? false,
        'primaryContact' => $contact['isPrimary'] ?? false,
        'created_at' => now(),
        'updated_at' => now()
      ];

      DB::table('contact_information')->updateOrInsert(
        [
          'tcrcId' => $contact['id'],
          'emailAddress' => $contact['email']
        ],
        $contactData
      );

      $this->logDbOperation('contact_information', 'upsert', [
        'tcrcId' => $contact['id'],
        'email' => $contact['email']
      ]);
    }
  }


  private function processSotRecords($participantId, $sotRecords)
  {
    try {
      foreach ($sotRecords as $sot) {

        $existingSot = DB::table('sot')
          ->where(function ($query) use ($sot) {
            $query->where('sotId', $sot['sotId'])
              ->orWhere('tcrcId', $sot['id']);
          })
          ->first();

        $sotData = [
          'tcrcId' => $sot['id'],
          'participant_id' => $participantId,
          'sotId' => $sot['sotId'],
          'sotOrgId' => $sot['sotOrgId'] ?? '0',
          'registrationExpirationDate' => $sot['expirationDate'],
          'sotApprovedDate' => $sot['approvedDate'],
          'sotStatus' => $sot['status'] ?? 'pending',
          'isInitialFiling' => isset($sot['isInitialFiling']) ? (bool)$sot['isInitialFiling'] : false,
          'note' => $sot['note'] ?? '',
          'manualCorrection' => isset($sot['manualCorrection']) ? (bool)$sot['manualCorrection'] : false,
          'legacyId' => $sot['id'],
          'updated_at' => now()
        ];

        if ($existingSot) {

          DB::table('sot')
            ->where(function ($query) use ($sot) {
              $query->where('sotId', $sot['sotId'])
                ->orWhere('tcrcId', $sot['id']);
            })
            ->update($sotData);

          $this->logDbOperation('sot', 'update', [
            'sotId' => $sot['sotId'],
            'tcrcId' => $sot['id'],
            'participant_id' => $participantId
          ]);

          $this->logger->info("Updated existing SOT record", [
            'sotId' => $sot['sotId'],
            'tcrcId' => $sot['id'],
            'participant_id' => $participantId
          ]);
        } else {

          $sotData['created_at'] = now();

          try {
            DB::table('sot')->insert($sotData);

            $this->logDbOperation('sot', 'insert', [
              'sotId' => $sot['sotId'],
              'tcrcId' => $sot['id'],
              'participant_id' => $participantId
            ]);

            $this->logger->info("Created new SOT record", [
              'sotId' => $sot['sotId'],
              'tcrcId' => $sot['id'],
              'participant_id' => $participantId
            ]);
          } catch (\Illuminate\Database\QueryException $e) {

            if ($e->errorInfo[1] === 1062) { // Duplicate entry error
              $this->logger->warning("Duplicate SOT record detected, attempting update", [
                'sotId' => $sot['sotId'],
                'tcrcId' => $sot['id'],
                'participant_id' => $participantId
              ]);

              // Try to update instead
              DB::table('sot')
                ->where(function ($query) use ($sot) {
                  $query->where('sotId', $sot['sotId'])
                    ->orWhere('tcrcId', $sot['id']);
                })
                ->update($sotData);
            } else {
              throw $e; // Re-throw if it's not a duplicate entry error
            }
          }
        }
      }

      return true;

    } catch (\Exception $e) {
      $this->logger->error("Error processing SOT record", [
        'participant_id' => $participantId,
        'sotId' => $sot['sotId'] ?? null,
        'tcrcId' => $sot['id'] ?? null,
        'error' => $e->getMessage(),
        'trace' => $e->getTraceAsString()
      ]);
      throw $e;
    }
  }


  private function verifySotRecords($participantId, $craftSotRecords)
  {
    $laravelSotRecords = DB::table('sot')
      ->where('participant_id', $participantId)
      ->get();

    $mismatches = [];

    // Compare counts
    if (count($craftSotRecords) !== $laravelSotRecords->count()) {
      $mismatches[] = [
        'type' => 'count',
        'craft' => count($craftSotRecords),
        'laravel' => $laravelSotRecords->count()
      ];
    }

    // Compare individual records
    foreach ($craftSotRecords as $craftSot) {
      $laravelSot = $laravelSotRecords->firstWhere('sotId', $craftSot['sotId']);

      if (!$laravelSot) {
        $mismatches[] = [
          'type' => 'missing',
          'sotId' => $craftSot['sotId']
        ];
        continue;
      }

      // Compare key fields
      $fieldsToCompare = [
        'sotOrgId',
        'registrationExpirationDate',
        'sotApprovedDate',
        'sotStatus',
        'isInitialFiling'
      ];

      foreach ($fieldsToCompare as $field) {
        $craftValue = $craftSot[$field] ?? null;
        $laravelValue = $laravelSot->$field ?? null;

        if ($craftValue != $laravelValue) {
          $mismatches[] = [
            'type' => 'field_mismatch',
            'sotId' => $craftSot['sotId'],
            'field' => $field,
            'craft' => $craftValue,
            'laravel' => $laravelValue
          ];
        }
      }
    }

    return $mismatches;
  }

  /**
   * Process and create DBA names
   */
  private function processDbaNames($participantId, $dbaNames)
  {
    // First, remove all existing DBA names for this participant
    DB::table('dba_names')->where('participant_id', $participantId)->delete();

    // Then insert all DBA names
    foreach ($dbaNames as $dbaName) {
      DB::table('dba_names')->insert([
        'participant_id' => $participantId,
        'name' => $dbaName,
        'created_at' => now(),
        'updated_at' => now()
      ]);
    }
  }

  /**
   * Format participant data for display in dry run
   */
  private function formatParticipantDataForDisplay($craftData)
  {
    return [
      ['Business Name', $craftData['legalBusinessName']],
      ['TCRC ID', $craftData['tcrcId']],
      ['SOT ID', $craftData['sotId']],
      ['Email', $craftData['email']],
      ['Status', $craftData['participantStatus']],
      ['Business Owner', "{$craftData['businessOwner']['firstName']} {$craftData['businessOwner']['lastName']}"],
      ['Contact Count', count($craftData['contacts'])],
      ['Location Count', count($craftData['locations'])],
      ['SOT Record Count', count($craftData['sotRecords'])],
      ['Created Date', $craftData['metadata']['dateCreated']],
      ['Updated Date', $craftData['metadata']['dateUpdated']]
    ];
  }


  private function migrateUser($userId, $isDryRun)
  {
    try {
      // Fetch user from Craft
      $craftUser = $this->fetchCraftUser($userId);

      if (!$craftUser) {
        $this->warn("No user found in Craft for ID: $userId");
        return null;
      }

      if ($isDryRun) {
        $userGroup = $this->determineUserGroup($craftUser);
        $this->displayUserDryRun($craftUser, $userGroup);
        return ['user_id' => $userId];
      }

      // Prepare user data
      $userData = $this->prepareUserData($craftUser);

      try {
        DB::beginTransaction();

        // Attempt to find existing user by ID or email
        $existingUser = DB::table('users')
          ->where('id', $craftUser->id)
          ->orWhere('email', $craftUser->email)
          ->first();

        if ($existingUser) {
          if ($existingUser->id != $craftUser->id && $existingUser->email == $craftUser->email) {
            $message = "Email conflict detected: {$craftUser->email} already exists with different ID";
            Log::warning($message, [
              'craft_user_id' => $craftUser->id,
              'existing_user_id' => $existingUser->id
            ]);
            throw new \Exception($message);
          }

          // Update existing user
          DB::table('users')
            ->where('id', $existingUser->id)
            ->update($userData);

          $userId = $existingUser->id;
          $this->logDbOperation('users', 'update', [
            'id' => $userId,
            'email' => $userData['email']
          ]);
        } else {
          // Insert new user
          $userId = DB::table('users')->insertGetId($userData);
          $this->logDbOperation('users', 'insert', [
            'id' => $userId,
            'email' => $userData['email']
          ]);
        }

        // Handle user roles
        $userGroup = $this->determineUserGroup($craftUser);
        $this->assignUserRole($userId, $userGroup);

        // Handle additional user attributes
        //$this->handleUserAttributes($userId, $craftUser);

        DB::commit();

        $this->logger->info("Successfully migrated user: {$craftUser->email}");
        return ['user_id' => $userId];

      } catch (\Exception $e) {
        DB::rollBack();
        throw new \Exception("Failed to migrate user: " . $e->getMessage());
      }

    } catch (\Exception $e) {
      $this->logger->error("Error migrating user data: " . $e->getMessage());
      $this->logger->error("User migration error", [
        'userId' => $userId,
        'error' => $e->getMessage(),
        'trace' => $e->getTraceAsString()
      ]);
      return null;
    }
  }

  /**
   * Fetch user data from Craft
   */
  private function fetchCraftUser($userId)
  {
    return DB::connection('craft')
      ->table('users as u')
      ->join('elements as e', 'u.id', '=', 'e.id')
      ->where('u.id', $userId)
      ->where('e.enabled', 1)
      ->whereNull('e.dateDeleted')
      ->select([
        'u.id',
        'u.username',
        'u.firstName',
        'u.lastName',
        'u.email',
        'u.password',
        'u.admin',
        'u.locked',
        'u.suspended',
        'u.pending',
        'u.lastLoginDate',
        'u.dateCreated',
        'u.dateUpdated'
      ])
      ->first();
  }

  /**
   * Prepare user data for insertion/update
   */
  private function prepareUserData($craftUser)
  {
    return [
      'id' => $craftUser->id,
      'name' => trim($craftUser->firstName . ' ' . $craftUser->lastName),
      'email' => $craftUser->email,
      'username' => $craftUser->username,
      'firstName' => $craftUser->firstName,
      'lastName' => $craftUser->lastName,
      'password' => $craftUser->password ?? Hash::make('password'),
      'email_verified_at' => !$craftUser->pending ? $craftUser->dateCreated : null,
      'user_group' => $this->determineUserGroup($craftUser),
      'lastLoginDate' => $craftUser->lastLoginDate,
      'created_at' => $craftUser->dateCreated,
      'updated_at' => $craftUser->dateUpdated,
      'status' => $this->determineUserStatus($craftUser)
    ];
  }

  /**
   * Determine user status based on Craft user properties
   */
  private function determineUserStatus($craftUser)
  {
    if ($craftUser->suspended) return 'suspended';
    if ($craftUser->locked) return 'locked';
    if ($craftUser->pending) return 'pending';
    return 'active';
  }

  /**
   * Handle additional user attributes
   */
  private function handleUserAttributes($userId, $craftUser)
  {
    // Handle user preferences
    DB::table('user_preferences')->updateOrInsert(
      ['user_id' => $userId],
      [
        'email_notifications' => true,
        'created_at' => now(),
        'updated_at' => now()
      ]
    );

    // Handle user settings
    DB::table('user_settings')->updateOrInsert(
      ['user_id' => $userId],
      [
        'timezone' => config('app.timezone'),
        'language' => 'en',
        'created_at' => now(),
        'updated_at' => now()
      ]
    );
  }


  private function determineUserGroup($craftUser)
  {
    if ($craftUser->admin) {
      return 'TCRC Admin';
    }
    try {
      // Get user group from Craft
      $userGroup = DB::connection('craft')
        ->table('usergroups_users as ugu')
        ->join('usergroups as ug', 'ugu.groupId', '=', 'ug.id')
        ->where('ugu.userId', $craftUser->id)
        ->select('ug.name', 'ug.handle')
        ->first();

      if (!$userGroup) {
        return 'Participant';
      }
      $validGroups = [
        'Board Member',
        'Claimant',
        'Participant',
        'SOT',
        'TCRC Admin'
      ];

      return in_array($userGroup->name, $validGroups)
        ? $userGroup->name
        : 'Participant';
    } catch (\Exception $e) {
      $this->logger->error("Error determining user group", [
        'userId' => $craftUser->id,
        'error' => $e->getMessage()
      ]);
      return 'Participant'; // Default fallback
    }
  }

  private function assignUserRole($userId, $userGroup)
  {
    try {
      // First, remove any existing roles
      DB::table('model_has_roles')
        ->where('model_type', 'App\Models\User')
        ->where('model_id', $userId)
        ->delete();

      // Get the role ID from the roles table
      $role = DB::table('roles')
        ->where('name', $userGroup)
        ->first();

      if (!$role) {
        Log::warning("Role not found for user group: $userGroup");
        return false;
      }

      // Assign the new role
      DB::table('model_has_roles')->insert([
        'role_id' => $role->id,
        'model_type' => 'App\Models\User',
        'model_id' => $userId
      ]);

      return true;
    } catch (\Exception $e) {
      $this->logger->error("Error assigning user role", [
        'userId' => $userId,
        'userGroup' => $userGroup,
        'error' => $e->getMessage()
      ]);
      return false;
    }
  }

  private function displayUserDryRun($user, $userGroup)
  {
    $this->line("\nUser ID: " . $user->id);
    $this->table(
      ['Field', 'Value'],
      [
        ['Name', trim($user->firstName . ' ' . $user->lastName)],
        ['Username', $user->username],
        ['Email', $user->email],
        ['User Group', $userGroup],
        ['Status', $this->getUserStatus($user)],
        ['Last Login', $user->lastLoginDate ?? 'Never'],
        ['Created', $user->dateCreated]
      ]
    );
  }

  private function getUserStatus($user)
  {
    if ($user->suspended) return 'Suspended';
    if ($user->locked) return 'Locked';
    if ($user->pending) return 'Pending';
    return 'Active';
  }


  protected function verifyUserData($craftUser, $laravelUser)
  {
    if (!$craftUser || !$laravelUser) {
      $this->logger->error("Cannot verify user data - missing data from one or both sources");
      return false;
    }

    $this->logger->info("Starting user data verification");
    $mismatches = [];

    $fieldsToCheck = [
      'email' => 'Email',
      'username' => 'Username',
      'firstName' => 'First Name',
      'lastName' => 'Last Name',
      'password' => 'Password Hash'
    ];

    foreach ($fieldsToCheck as $field => $label) {
      if ($craftUser->$field !== $laravelUser->$field) {
        $mismatches[] = [
          'field' => $label,
          'craft_value' => $craftUser->$field,
          'laravel_value' => $laravelUser->$field
        ];
      }
    }

    // Check dates
    $craftCreated = date('Y-m-d H:i:s', strtotime($craftUser->dateCreated));
    $laravelCreated = date('Y-m-d H:i:s', strtotime($laravelUser->created_at));
    if ($craftCreated !== $laravelCreated) {
      $mismatches[] = [
        'field' => 'Created Date',
        'craft_value' => $craftCreated,
        'laravel_value' => $laravelCreated
      ];
    }

    if (!empty($mismatches)) {
      $this->logger->warning("User data verification failed", [
        'mismatches' => $mismatches,
        'user_id' => $craftUser->id
      ]);
      return false;
    }

    $this->logger->info("User data verification passed");
    return true;
  }


  protected function migrateClaimsData($userId, $isDryRun)
  {
    $this->logger->info("Starting claims migration", [
      'user_id' => $userId,
      'dry_run' => $isDryRun
    ]);

    try {
      // Fetch claims data from Craft
      $craftClaims = $this->getCraftClaimsData($userId);

      if ($craftClaims->isEmpty()) {
        $this->logger->info("No claims found in Craft for user ID: $userId");
        return true;
      }

      if ($isDryRun) {
        $this->logger->info("Would migrate " . $craftClaims->count() . " claims");
        foreach ($craftClaims as $claim) {
          $this->displayClaimDryRun($claim);
        }
        return true;
      }

      $successCount = 0;
      $failureCount = 0;

      // Process each claim individually with its own transaction
      foreach ($craftClaims as $craftClaim) {
        DB::beginTransaction();

        try {
          $participantId = $craftClaim['participantId'] ?? null;

          // Process main claim
          $claim = $this->processClaimMigration($craftClaim, $participantId);

          if ($claim) {
            // Log successful operation
            $this->logger->info("Successfully migrated claim", [
              'claim_id' => $craftClaim['claimId'],
              'participant_id' => $participantId
            ]);

            $successCount++;
            DB::commit();
          } else {
            throw new \Exception("Failed to process claim migration");
          }

        } catch (\Exception $e) {
          DB::rollBack();

          $failureCount++;
          $this->logger->error("Failed to migrate individual claim", [
            'claim_id' => $craftClaim['claimId'] ?? 'unknown',
            'error' => $e->getMessage(),
            'trace' => $e->getTraceAsString()
          ]);

          // Continue with next claim instead of stopping entire process
          continue;
        }
      }

      // Log final results
      $this->logger->info("Claims migration completed", [
        'total_claims' => $craftClaims->count(),
        'successful' => $successCount,
        'failed' => $failureCount
      ]);

      return $failureCount === 0;

    } catch (\Exception $e) {
      $this->logger->error("Fatal error during claims migration", [
        'user_id' => $userId,
        'error' => $e->getMessage(),
        'trace' => $e->getTraceAsString()
      ]);

      return false;
    }
  }


  private function processClaimMigration($craftClaim, $participantId)
  {
    try {
      // 1. Create or update the main claim record
      $claim = $this->createOrUpdateClaim($craftClaim, $participantId);
      if (!$claim) {
        throw new \Exception("Failed to create/update claim record");
      }

      // 2. Process passengers
      if (!empty($craftClaim['passengers'])) {
        $this->processPassengers($claim->id, $craftClaim['passengers']);
      }

      if (!empty($craftClaim['craftId'])) {
        $this->processPaymentProofs($claim->id, $craftClaim['craftId']);
      }


      if (!empty($craftClaim['collaterals'])) {
        $this->processCollaterals($claim->id, $craftClaim['collaterals']);
      }


      if (!empty($craftClaim['craftId'])) {
        $this->processClaimNotes($claim->id, $craftClaim['craftId']);
      }


      if (!empty($craftClaim['craftId'])) {
        $this->processInsurance($claim->id, $craftClaim['craftId']);
      }

      if (!empty($craftClaim['craftId'])) {
        $this->processReimbursement($claim->id, $craftClaim['craftId']);
      }

      if (!empty($craftClaim['craftId'])) {
        $this->processClaimHistory($claim->id, $craftClaim['craftId']);
      }


      $this->logger->info("Successfully processed claim: " . $craftClaim['claimId']);
      return $claim;

    } catch (\Exception $e) {
      $this->logger->error("Error processing claim migration", [
        'claim_id' => $craftClaim['claimId'] ?? 'unknown',
        'error' => $e->getMessage(),
        'trace' => $e->getTraceAsString()
      ]);

      throw $e;
    }
  }


  private function processClaimHistory($claimId, $craftClaimId)
  {
    try {
      $this->logger->info("Processing claim history", [
        'claim_id' => $claimId,
        'craft_claim_id' => $craftClaimId
      ]);

      // Get history records from Craft
      $craftHistory = DB::connection('craft')
        ->table('matrixblocks as mb')
        ->join('matrixcontent_claimshistory as mch', 'mb.id', '=', 'mch.elementId')
        ->join('elements as e', 'mb.id', '=', 'e.id')
        ->where('mb.ownerId', $craftClaimId)
        ->where('e.enabled', 1)
        ->where('e.archived', 0)
        ->whereNull('e.dateDeleted')
        ->select([
          'mb.id as tcrcId',
          'mch.field_blockHistory_notes',
          'mch.field_blockHistory_receivedCheckClearedDate',
          'mch.field_blockHistory_receivedCheckAmount',
          'mch.field_blockHistory_approvedCheckAmount',
          'mch.field_blockHistory_receivedCheckDate',
          'mch.field_blockHistory_approvedCheckNumber',
          'mch.field_blockHistory_approvedCheckDate',
          'mch.field_blockHistory_feeRefundAmount',
          'mch.field_blockHistory_receivedCheckNumber',
          'mch.field_blockHistory_receivedCheckBouncedDate',
          'mb.dateCreated',
          'mb.dateUpdated'
        ])
        ->get();

      DB::beginTransaction();
      try {
        foreach ($craftHistory as $history) {
          $historyData = [
            'claim_id' => $claimId,
            'tcrcId' => $history->tcrcId,
            'notes' => $history->field_blockHistory_notes,
            'approvedCheckNumber' => $history->field_blockHistory_approvedCheckNumber,
            'approvedCheckAmount' => $this->formatDecimal($history->field_blockHistory_approvedCheckAmount),
            'approvedCheckDate' => $history->field_blockHistory_approvedCheckDate,
            'feeRefundAmount' => $this->formatDecimal($history->field_blockHistory_feeRefundAmount),
            'receivedCheckNumber' => $history->field_blockHistory_receivedCheckNumber,
            'receivedCheckAmount' => $this->formatDecimal($history->field_blockHistory_receivedCheckAmount),
            'receivedCheckDate' => $history->field_blockHistory_receivedCheckDate,
            'receivedCheckClearedDate' => $history->field_blockHistory_receivedCheckClearedDate,
            'receivedCheckBouncedDate' => $history->field_blockHistory_receivedCheckBouncedDate,
            'updated_at' => $history->dateUpdated
          ];

          // Check if history record exists
          $existingHistory = DB::table('claims_history')
            ->where('tcrcId', $history->tcrcId)
            ->first();

          if ($existingHistory) {
            DB::table('claims_history')
              ->where('tcrcId', $history->tcrcId)
              ->update($historyData);

            $this->logDbOperation('claims_history', 'update', [
              'tcrcId' => $history->tcrcId,
              'claim_id' => $claimId
            ]);
          } else {
            $historyData['created_at'] = $history->dateCreated;

            DB::table('claims_history')->insert($historyData);

            $this->logDbOperation('claims_history', 'insert', [
              'tcrcId' => $history->tcrcId,
              'claim_id' => $claimId
            ]);
          }
        }

        DB::commit();
        return true;

      } catch (\Exception $e) {
        DB::rollBack();
        throw $e;
      }

    } catch (\Exception $e) {
      $this->logger->error("Error processing claim history", [
        'claim_id' => $claimId,
        'error' => $e->getMessage(),
        'trace' => $e->getTraceAsString()
      ]);
      return false;
    }
  }

  private function processWithErrorHandling($operation, $callback)
  {
    try {
      return $callback();
    } catch (\Exception $e) {
      $this->logger->error("Error in {$operation}", [
        'error' => $e->getMessage(),
        'trace' => $e->getTraceAsString()
      ]);
      return false;
    }
  }

  private function processInsurance($claimId, $craftClaimId)
  {
    try {
      $this->logger->info("Processing insurance information", [
        'claim_id' => $claimId,
        'craft_claim_id' => $craftClaimId
      ]);

      // Get insurance info from Craft
      $insuranceInfo = DB::connection('craft')
        ->table('content as c')
        ->where('c.elementId', $craftClaimId)
        ->select([
          'c.elementId as tcrcId',
          'c.field_insurancePurchaseDate',
          'c.field_insurancePurchaseAmount',
          'c.field_insurancePurchasedFrom',
          'c.field_insurer',
          'c.field_insurerFirstName',
          'c.field_insurerLastName',
          'c.field_insurerAddress',
          'c.field_insurerCity',
          'c.field_insurerState',
          'c.field_insurerZipCode',
          'c.field_insuranceSellerFirstName',
          'c.field_insuranceSellerLastName',
          'c.field_insuranceSellerAddress',
          'c.field_insuranceSellerCity',
          'c.field_insuranceSellerState',
          'c.field_insuranceSellerZipCode',
          'c.dateCreated',
          'c.dateUpdated'
        ])
        ->first();

      if (!$insuranceInfo) {
        $this->logger->info("No insurance information found", [
          'claim_id' => $claimId,
          'craft_claim_id' => $craftClaimId
        ]);
        return true;
      }

      DB::beginTransaction();
      try {
        //dd($insuranceInfo);
        $insuranceData = [
          'tcrcId' => $insuranceInfo->tcrcId,
          'claim_id' => $claimId,
          'purchase_date' => $insuranceInfo->field_insurancePurchaseDate ?? null,
          'purchase_amount' => $insuranceInfo->field_insurancePurchaseAmount ?? null,
          'purchased_from' => $insuranceInfo->field_insurancePurchasedFrom,
          'insurer_name' => $insuranceInfo->field_insurer,
          'insurer_first_name' => $insuranceInfo->field_insurerFirstName,
          'insurer_last_name' => $insuranceInfo->field_insurerLastName,
          'insurer_address' => $insuranceInfo->field_insurerAddress,
          'insurer_city' => $insuranceInfo->field_insurerCity,
          'insurer_state' => $insuranceInfo->field_insurerState,
          'insurer_zip_code' => $insuranceInfo->field_insurerZipCode,
          'seller_first_name' => $insuranceInfo->field_insuranceSellerFirstName,
          'seller_last_name' => $insuranceInfo->field_insuranceSellerLastName,
          'seller_address' => $insuranceInfo->field_insuranceSellerAddress,
          'seller_city' => $insuranceInfo->field_insuranceSellerCity,
          'seller_state' => $insuranceInfo->field_insuranceSellerState,
          'seller_zip_code' => $insuranceInfo->field_insuranceSellerZipCode,
          'updated_at' => now()
        ];

        // Check if insurance record exists by tcrcId or claim_id
        $existingInsurance = DB::table('insurances')
          ->where(function ($query) use ($insuranceInfo, $claimId) {
            $query->where('tcrcId', $insuranceInfo->tcrcId)
              ->orWhere('claim_id', $claimId);
          })
          ->first();

        if ($existingInsurance) {
          // Handle potential conflicts
          if ($existingInsurance->claim_id != $claimId &&
            $existingInsurance->tcrcId == $insuranceInfo->tcrcId) {
            $this->logger->warning("Insurance record conflict detected", [
              'tcrcId' => $insuranceInfo->tcrcId,
              'existing_claim_id' => $existingInsurance->claim_id,
              'new_claim_id' => $claimId
            ]);
          }

          // Update existing record
          DB::table('insurances')
            ->where('id', $existingInsurance->id)
            ->update($insuranceData);

          $this->logDbOperation('insurances', 'update', [
            'id' => $existingInsurance->id,
            'tcrcId' => $insuranceInfo->tcrcId,
            'claim_id' => $claimId
          ]);

          $this->logger->info("Updated existing insurance record", [
            'id' => $existingInsurance->id,
            'tcrcId' => $insuranceInfo->tcrcId
          ]);
        } else {
          // Insert new record
          $insuranceData['created_at'] = $insuranceInfo->dateCreated ?? now();

          $insuranceId = DB::table('insurances')->insertGetId($insuranceData);

          $this->logDbOperation('insurances', 'insert', [
            'id' => $insuranceId,
            'tcrcId' => $insuranceInfo->tcrcId,
            'claim_id' => $claimId
          ]);

          $this->logger->info("Created new insurance record", [
            'id' => $insuranceId,
            'tcrcId' => $insuranceInfo->tcrcId
          ]);
        }

        // Verify the operation
        $verifyInsurance = DB::table('insurances')
          ->where('claim_id', $claimId)
          ->first();

        if (!$verifyInsurance) {
          throw new \Exception("Failed to verify insurance record after save");
        }

        DB::commit();

        return true;

      } catch (\Exception $e) {
        DB::rollBack();
        throw new \Exception("Transaction failed: " . $e->getMessage());
      }

    } catch (\Exception $e) {
      $this->logger->error("Error processing insurance information", [
        'claim_id' => $claimId,
        'error' => $e->getMessage(),
        'trace' => $e->getTraceAsString()
      ]);
      throw $e;
    }
  }


  private function processPaymentProofs($claimId, $craftClaimId)
  {
    try {
      // Get super table blocks
      $superTableBlocks = DB::connection('craft')
        ->table('supertableblocks')
        ->where('ownerId', $craftClaimId)
        ->get();

      if ($superTableBlocks->isEmpty()) {
        $this->logger->info("No payment proofs found for claim ID: $claimId");
        return true;
      }

      // Get payment proofs
      $paymentProofs = DB::connection('craft')
        ->table('stc_paymentproof')
        ->whereIn('elementId', $superTableBlocks->pluck('id'))
        ->get();

      if ($paymentProofs->isEmpty()) {
        $this->logger->info("No payment proof records found for claim ID: $claimId");
        return true;
      }

      DB::beginTransaction();
      try {
        foreach ($paymentProofs as $proof) {
          $paymentData = [
            'paymentable_type' => 'App\Models\Claim',
            'paymentable_id' => $claimId,
            'legacyId' => $proof->elementId,
            'paymentTypeName' => $proof->field_paymentForm,
            'paymentForType' => 'claim_payment',
            'paidDate' => $proof->field_paymentDate,
            'createDate' => $proof->field_paymentDate,
            'subtotalAmount' => $proof->field_paymentAmount,
            'totalAmount' => $proof->field_paymentAmount,
            'payment_status' => 'completed',
            'payment_meta' => json_encode([
              'source' => 'payment_proof',
              'original_form' => $proof->field_paymentForm
            ]),
            'updated_at' => now()
          ];

          // Check if payment history record already exists
          $existingPayment = DB::table('payment_history')
            ->where('paymentable_type', 'App\Models\Claim')
            ->where('paymentable_id', $claimId)
            ->where('legacyId', $proof->elementId)
            ->first();

          if ($existingPayment) {
            // Update existing record
            DB::table('payment_history')
              ->where('id', $existingPayment->id)
              ->update($paymentData);

            $this->logDbOperation('payment_history', 'update', [
              'id' => $existingPayment->id,
              'claim_id' => $claimId,
              'amount' => $proof->field_paymentAmount,
              'type' => 'payment_proof'
            ]);
          } else {
            // Insert new record
            $paymentData['created_at'] = now();

            DB::table('payment_history')->insert($paymentData);

            $this->logDbOperation('payment_history', 'insert', [
              'claim_id' => $claimId,
              'amount' => $proof->field_paymentAmount,
              'type' => 'payment_proof'
            ]);
          }
        }

        DB::commit();

        $this->logger->info("Successfully processed payment proofs", [
          'claim_id' => $claimId,
          'count' => $paymentProofs->count()
        ]);

        return true;

      } catch (\Exception $e) {
        DB::rollBack();
        throw $e;
      }

    } catch (\Exception $e) {
      $this->logger->error("Error processing payment proofs", [
        'claim_id' => $claimId,
        'error' => $e->getMessage(),
        'trace' => $e->getTraceAsString()
      ]);
      return false;
    }
  }

  /**
   * Create or update main claim record
   */
  private function createOrUpdateClaim($craftClaim, $participantId = null)
  {
    //dd($craftClaim, $participantId);
    try {
      if ($participantId != null) {
        $participant = DB::table('participants')
          ->where('id', $participantId)
          ->first();

        if (!$participant) {
          $this->logger->warning("Participant with ID $participantId not found, setting participant to null");
          $participantId = null;
        }
      }


      //dd($participantId, $craftClaim);

      $claimData = [
        'participant' => $participantId,
        //'userId' => $participant->userId ?? null,
        'userId' => $craftClaim['userId'] ?? null,
        'claimId' => $craftClaim['claimId'],


        'craftDbId' => $craftClaim['craftId'],
        'tcrcId' => $craftClaim['craftId'],


        'claimStatus' => $craftClaim['status'],
        'paymentStatus' => $craftClaim['paymentStatus'],
        'firstName' => $craftClaim['claimant']['firstName'],
        'middleName' => $craftClaim['claimant']['middleName'],
        'lastName' => $craftClaim['claimant']['lastName'],
        'email' => $craftClaim['claimant']['email'],
        'address' => $craftClaim['claimant']['address'],
        'city' => $craftClaim['claimant']['city'],
        'state' => $craftClaim['claimant']['state'],
        'zipCode' => $craftClaim['claimant']['zipCode'],
        'primaryPhone' => $craftClaim['claimant']['primaryPhone'],
        'secondaryPhone' => $craftClaim['claimant']['secondaryPhone'],
        'createDate' => $craftClaim['details']['createDate'],
        'claimAmountTotal' => $craftClaim['details']['claimAmount'],
        'claimAmountBasis' => $craftClaim['details']['basis'],
        'departureDate' => $craftClaim['details']['departureDate'],
        'returnDate' => $craftClaim['details']['returnDate'],
        'servicesPurchased' => $craftClaim['details']['servicesPurchased'],
        'hasInsurance' => $craftClaim['details']['hasInsurance'],
        'hasReimbursementSource' => $craftClaim['details']['hasReimbursement'],
        'created_at' => $craftClaim['metadata']['dateCreated'],
        'updated_at' => $craftClaim['metadata']['dateUpdated']
      ];

      // Check if claim already exists
      $existingClaim = DB::table('claims')
        ->where('claimId', $craftClaim['claimId'])
        ->first();

      if ($existingClaim) {
        // Update existing claim
        DB::table('claims')
          ->where('claimId', $craftClaim['claimId'])
          ->update($claimData);


        $this->logDbOperation('claims', 'update', [
          'claimId' => $craftClaim['claimId']
        ]);

        return DB::table('claims')
          ->where('claimId', $craftClaim['claimId'])
          ->first();
      } else {
        // Insert new claim
        $claimId = DB::table('claims')->insertGetId($claimData);
        $this->logDbOperation('claims', 'insert', [
          'id' => $claimId,
          'claimId' => $craftClaim['claimId']
        ]);
        return DB::table('claims')->where('id', $claimId)->first();
      }

    } catch (\Exception $e) {
      throw new \Exception("Failed to create/update claim: " . $e->getMessage());
    }
  }

  /**
   * Process passengers for a claim
   */
  private function processPassengers($claimId, $passengers)
  {
    // First remove existing passengers
    DB::table('passengers')->where('claim_id', $claimId)->delete();

    foreach ($passengers as $passenger) {
      DB::table('passengers')->insert([
        'claim_id' => $claimId,
        'firstName' => $passenger['col1'],
        'middleName' => $passenger['col2'] ?? null,
        'lastName' => $passenger['col3']
      ]);
    }
  }


  /**
   * Process collaterals for a claim
   */
  private function processCollaterals($claimId, $collaterals)
  {
    foreach ($collaterals as $collateral) {
      //dd($collateral);
      $collateralData = [
        'claim_id' => $claimId,
        'fileName' => $collateral->field_collaterals_fileName,
        'fileDescription' => $collateral->field_collaterals_fileDescription ?? null,
        'createDate' => $collateral->field_collaterals_createDate,
        'fileUrl' => null,
        'file_path' => $this->processCollateralFile($collateral)
      ];

      DB::table('collaterals')->updateOrInsert(
        [
          'claim_id' => $claimId,
          'fileName' => $collateral->field_collaterals_fileName,
        ],
        $collateralData
      );
    }
  }


  private function processReimbursement($claimId, $craftClaimId)
  {
    try {
      $this->logger->info("Processing reimbursement information", [
        'claim_id' => $claimId,
        'craft_claim_id' => $craftClaimId
      ]);

      // Get reimbursement info from Craft content table
      $reimbursementInfo = DB::connection('craft')
        ->table('content')
        ->where('elementId', $craftClaimId)
        ->select([
          'elementId as tcrcId',
          'field_hasReimbursementSource',
          'field_reimbursementSource',
          'field_reimbursementDetails',
          'dateCreated',
          'dateUpdated'
        ])
        ->first();

      if (!$reimbursementInfo) {
        $this->logger->warning("No reimbursement data found", [
          'claim_id' => $claimId
        ]);
        return false;
      }

      DB::beginTransaction();
      try {
        $reimbursement = Reimbursement::firstOrNew(
          ['claim_id' => $claimId],
          [
            'tcrcId' => $reimbursementInfo->tcrcId,
            'source' => $reimbursementInfo->field_reimbursementSource,
            'details' => $reimbursementInfo->field_reimbursementDetails,
            'created_at' => $reimbursementInfo->dateCreated
          ]
        );

        // Update if existing
        if ($reimbursement->exists) {
          $reimbursement->update([
            'source' => $reimbursementInfo->field_reimbursementSource,
            'details' => $reimbursementInfo->field_reimbursementDetails,
            'updated_at' => $reimbursementInfo->dateUpdated
          ]);

          $this->logDbOperation('reimbursements', 'update', [
            'id' => $reimbursement->id,
            'claim_id' => $claimId
          ]);
        } else {
          $reimbursement->save();

          $this->logDbOperation('reimbursements', 'insert', [
            'id' => $reimbursement->id,
            'claim_id' => $claimId
          ]);
        }

        // Get field ID for reimbursement documents
        $fieldId = DB::connection('craft')
          ->table('fields')
          ->where('handle', 'reimbursementDocuments')
          ->value('id');

        if ($fieldId) {
          // Get related assets through relations table
          $assets = DB::connection('craft')
            ->table('assets')
            ->join('elements', 'assets.id', '=', 'elements.id')
            ->join('volumes', 'assets.volumeId', '=', 'volumes.id')
            ->join('relations', function ($join) use ($craftClaimId, $fieldId) {
              $join->on('assets.id', '=', 'relations.targetId')
                ->where('relations.sourceId', '=', $craftClaimId)
                ->where('relations.fieldId', '=', $fieldId);
            })
            ->where('elements.enabled', 1)
            ->whereNull('elements.dateDeleted')
            ->select([
              'assets.id',
              'assets.filename',
              'assets.dateCreated',
              'volumes.url as volumePath'
            ])
            ->get();

          if ($assets->isNotEmpty()) {
            // Clear existing media first
            $reimbursement->clearMediaCollection('reimbursement_documents');

            foreach ($assets as $asset) {
              $craftFilePath = $this->getCraftFilePath($asset);

              if ($craftFilePath && file_exists($craftFilePath)) {
                try {
                  $reimbursement
                    ->addMedia($craftFilePath)
                    ->preservingOriginal()
                    ->withCustomProperties([
                      'craft_asset_id' => $asset->id,
                      'original_filename' => $asset->filename,
                      'original_created_date' => $asset->dateCreated
                    ])
                    ->toMediaCollection('reimbursement_documents');

                  $this->logDbOperation('media', 'insert', [
                    'reimbursement_id' => $reimbursement->id,
                    'filename' => $asset->filename
                  ]);
                } catch (\Exception $e) {
                  $this->logger->warning("Failed to process asset", [
                    'asset_id' => $asset->id,
                    'filename' => $asset->filename,
                    'error' => $e->getMessage()
                  ]);
                }
              }
            }
          }
        }

        DB::commit();

        $this->logger->info("Successfully processed reimbursement", [
          'claim_id' => $claimId,
          'reimbursement_id' => $reimbursement->id,
          'document_count' => $assets->count() ?? 0
        ]);

        return true;

      } catch (\Exception $e) {
        DB::rollBack();
        throw new \Exception("Transaction failed: " . $e->getMessage());
      }

    } catch (\Exception $e) {
      $this->logger->error("Error processing reimbursement information", [
        'claim_id' => $claimId,
        'error' => $e->getMessage(),
        'trace' => $e->getTraceAsString()
      ]);
      return false;
    }
  }

  private function getCraftFilePath($asset)
  {
    try {
      $basePath = config('craft.basePath', storage_path('craft'));
      return $basePath . '/' . trim($asset->volumePath, '/') . '/' . $asset->filename;
    } catch (\Exception $e) {
      $this->logger->error("Error getting Craft file path", [
        'asset_id' => $asset->id,
        'error' => $e->getMessage()
      ]);
      return null;
    }
  }

  /**
   * Verification method for reimbursements with media
   */
  private function verifyReimbursementData($craftClaimId, $laravelClaimId)
  {
    $mismatches = [];

    // Get Craft data
    $craftReimbursement = DB::connection('craft')
      ->table('content')
      ->where('elementId', $craftClaimId)
      ->select([
        'elementId as tcrcId',
        'field_hasReimbursementSource',
        'field_reimbursementSource',
        'field_reimbursementDetails'
      ])
      ->first();

    // Get Laravel data
    $laravelReimbursement = Reimbursement::with('media')
      ->where('claim_id', $laravelClaimId)
      ->first();

    if (!$craftReimbursement->field_hasReimbursementSource && $laravelReimbursement) {
      $mismatches[] = [
        'type' => 'unexpected_record',
        'message' => 'Laravel has reimbursement record when Craft indicates none'
      ];
      return $mismatches;
    }

    if ($craftReimbursement->field_hasReimbursementSource && !$laravelReimbursement) {
      $mismatches[] = [
        'type' => 'missing_record',
        'message' => 'Missing reimbursement record in Laravel'
      ];
      return $mismatches;
    }

    if ($craftReimbursement->field_hasReimbursementSource && $laravelReimbursement) {
      // Check basic fields
      $fieldsToCompare = [
        'tcrcId' => 'tcrcId',
        'source' => 'field_reimbursementSource',
        'details' => 'field_reimbursementDetails'
      ];

      foreach ($fieldsToCompare as $laravelField => $craftField) {
        if ($laravelReimbursement->$laravelField != $craftReimbursement->$craftField) {
          $mismatches[] = [
            'field' => $laravelField,
            'craft_value' => $craftReimbursement->$craftField,
            'laravel_value' => $laravelReimbursement->$laravelField
          ];
        }
      }

      // Verify documents
      $craftDocuments = DB::connection('craft')
        ->table('matrixblocks as mb')
        ->join('matrixcontent_reimbursementdocuments as mrd', 'mb.id', '=', 'mrd.elementId')
        ->where('mb.ownerId', $craftClaimId)
        ->count();

      $laravelDocuments = $laravelReimbursement->getMedia('documents')->count();

      if ($craftDocuments !== $laravelDocuments) {
        $mismatches[] = [
          'type' => 'document_count_mismatch',
          'craft_count' => $craftDocuments,
          'laravel_count' => $laravelDocuments
        ];
      }
    }

    return $mismatches;
  }

  private function processCollateralFile($collateral)
  {
    // TODO: Implement file handling logic
    // This would involve:
    // 1. Downloading the file from Craft's storage
    // 2. Storing it in Laravel's storage system
    // 3. Returning the new file path
    //return $collateral['fileUrl'] ?? null;
    return null;
  }

  /**
   * Display claim information for dry run
   */
  private function displayClaimDryRun($claim)
  {
    $this->line("\nClaim ID: " . $claim['claimId']);
    $this->table(
      ['Field', 'Value'],
      [
        ['Status', $claim['status']],
        ['Payment Status', $claim['paymentStatus']],
        ['Claimant', "{$claim['claimant']['firstName']} {$claim['claimant']['lastName']}"],
        ['Email', $claim['claimant']['email']],
        ['Claim Amount', number_format($claim['details']['claimAmount'], 2)],
        ['Create Date', $claim['details']['createDate']],
        ['Passenger Count', count($claim['passengers'])],
        ['Payment Count', count($claim['payments'])],
        ['Collateral Count', count($claim['collaterals'])],
        ['Has Insurance', $claim['details']['hasInsurance'] ? 'Yes' : 'No'],
        ['Has Reimbursement', $claim['details']['hasReimbursement'] ? 'Yes' : 'No']
      ]
    );
  }


  private function getParticipantNotes($participantId)
  {
    return DB::connection('craft')
      ->table('matrixblocks as mb')
      ->join('matrixcontent_notes as mn', 'mb.id', '=', 'mn.elementId')
      ->where('mb.ownerId', $participantId)
      ->select([
        'mn.id as id',
        'mn.field_note_note as note',
        'mn.field_note_date as date',
        'mb.dateCreated',
        'mb.dateUpdated'
      ])
      ->orderBy('mn.field_note_date', 'desc')
      ->get();
  }


  private function processParticipantNotes($participantId, $craftParticipantId)
  {
    try {
      $this->logger->info("Processing participant notes", [
        'participant_id' => $participantId,
        'craft_id' => $craftParticipantId
      ]);

      // Get notes from Craft
      $craftNotes = DB::connection('craft')
        ->table('matrixblocks as mb')
        ->join('matrixcontent_notes as mn', 'mb.id', '=', 'mn.elementId')
        ->join('elements as e', 'mb.id', '=', 'e.id')
        ->where('mb.ownerId', $craftParticipantId)
        ->where('e.enabled', 1)
        ->where('e.archived', 0)
        ->whereNull('e.dateDeleted')
        ->select([
          'mn.id',
          'mn.field_note_note as note',
          'mn.field_note_date as date',
          'mb.dateCreated',
          'mb.dateUpdated'
        ])
        ->orderBy('mn.field_note_date', 'desc')
        ->get();

      if ($craftNotes->isEmpty()) {
        $this->logger->info("No notes found for participant", [
          'participant_id' => $participantId
        ]);
        return true;
      }

      // Begin transaction
      DB::beginTransaction();

      try {
        // Get existing notes for comparison
        $existingNotes = DB::table('participant_notes')
          ->where('participant_id', $participantId)
          ->get()
          ->keyBy('tcrcId');

        $processedCount = 0;
        $updatedCount = 0;
        $insertedCount = 0;

        foreach ($craftNotes as $craftNote) {
          // Prepare note data
          $noteData = [
            'participant_id' => $participantId,
            'tcrcId' => $craftNote->id,
            'note' => $craftNote->note,
            'date' => $craftNote->date,
            'updated_at' => $craftNote->dateUpdated
          ];

          // Check if note exists
          if (isset($existingNotes[$craftNote->id])) {
            // Compare and update if needed
            $existingNote = $existingNotes[$craftNote->id];
            $needsUpdate = $existingNote->note !== $craftNote->note ||
              $existingNote->date !== $craftNote->date ||
              $existingNote->updated_at !== $craftNote->dateUpdated;

            if ($needsUpdate) {
              DB::table('participant_notes')
                ->where('tcrcId', $craftNote->id)
                ->where('participant_id', $participantId)
                ->update($noteData);

              $updatedCount++;

              $this->logDbOperation('participant_notes', 'update', [
                'tcrcId' => $craftNote->id,
                'participant_id' => $participantId
              ]);
            }
          } else {
            // Insert new note
            $noteData['created_at'] = $craftNote->dateCreated;

            DB::table('participant_notes')->insert($noteData);
            $insertedCount++;

            $this->logDbOperation('participant_notes', 'insert', [
              'tcrcId' => $craftNote->id,
              'participant_id' => $participantId
            ]);
          }

          $processedCount++;
        }

        // Clean up any notes that no longer exist in Craft
        $craftNoteIds = $craftNotes->pluck('id')->toArray();
        $deletedCount = DB::table('participant_notes')
          ->where('participant_id', $participantId)
          ->whereNotIn('tcrcId', $craftNoteIds)
          ->delete();

        if ($deletedCount > 0) {
          $this->logDbOperation('participant_notes', 'delete', [
            'participant_id' => $participantId,
            'count' => $deletedCount
          ]);
        }

        DB::commit();

        $this->logger->info("Successfully processed participant notes", [
          'participant_id' => $participantId,
          'total_processed' => $processedCount,
          'updated' => $updatedCount,
          'inserted' => $insertedCount,
          'deleted' => $deletedCount
        ]);

        return true;

      } catch (\Exception $e) {
        DB::rollBack();
        throw $e;
      }

    } catch (\Exception $e) {
      $this->logger->error("Error processing participant notes", [
        'participant_id' => $participantId,
        'error' => $e->getMessage(),
        'trace' => $e->getTraceAsString()
      ]);
      return false;
    }
  }

  private function getClaimNotes($claimId)
  {
    return DB::connection('craft')
      ->table('matrixblocks as mb')
      ->join('matrixcontent_notes as mn', 'mb.id', '=', 'mn.elementId')
      ->where('mb.ownerId', $claimId)
      ->select([
        'mn.field_note_note as note',
        'mn.field_note_date as date',
        'mb.dateCreated',
        'mb.dateUpdated'
      ])
      ->orderBy('mn.field_note_date', 'desc')
      ->get();
  }


  private function processClaimNotes($claimId, $craftClaimId)
  {
    // Get notes from Craft
    $notes = $this->getClaimNotes($craftClaimId);

    foreach ($notes as $note) {
      DB::table('notes')->updateOrInsert(
        [
          'claim_id' => $claimId,
          'created_at' => $note->dateCreated,
          'note' => $note->note
        ],
        [
          'updated_at' => $note->dateUpdated
        ]
      );
    }
  }
}

================
File: src/codesimulator/resources/code/code3.txt
================
name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push










          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push











          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push












          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push







          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push









          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push










          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push










          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push






          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push


          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push










          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push











          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push












          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push







          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push









          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push










          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push










          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push






          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push



          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push










          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push











          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push












          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push







          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push









          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push










          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push










          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push






          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push



          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push










          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push











          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push












          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push







          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push









          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push










          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push










          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push






          name: Release Windows Installer

on:
  push:
    tags:
      - 'v*.*.*'  # triggers only on version tags (e.g. v1.0.0)

jobs:
  release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      # (Optional) Step 3: Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 4: Install project dependencies
      - name: Install Dependencies
        run: npm install

      # (Optional) Step 5: Run any pre-build scripts if needed
      - name: Build Project
        run: npm run build

      # Step 6: Package Windows Installer using electron-builder
      - name: Package Installer
        run: npx electron-builder --win --x64
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # (Additional environment variables for signing or code signing can be added here)

      # Step 7: Upload built installer as an artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-installer
          path: dist/*.exe  # adjust to match your actual output artifact

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Step 9: Upload installer to the GitHub Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/YourInstaller.exe  # update this to the actual installer name
          asset_name: YourInstaller.exe
          asset_content_type: application/octet-stream

      # Step 10: Update release.md with link to installer
      - name: Update release.md
        run: |
          # Assume release.md contains a placeholder line like "Latest release: <LINK>"
          # and that the installer asset URL can be constructed from the release.
          echo "Updating release.md with the new installer link..."
          INSTALLER_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/YourInstaller.exe"
          # Use sed or PowerShell to update the file (example below using PowerShell):
          powershell -Command "(Get-Content release.md) -replace '<LINK>', '$INSTALLER_URL' | Set-Content release.md"
          # Commit and push the updated release.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release.md
          git commit -m "Update release.md with installer link for ${{ github.ref_name }}"
          git push

================
File: src/codesimulator/resources/applications.json
================
{
  "darwin": {
    "applications": [
      {
        "name": "Google Chrome",
        "process_name": "Google Chrome",
        "bundle_id": "com.google.Chrome"
      },
      {
        "name": "IntelliJ IDEA",
        "process_name": "IntelliJ IDEA",
        "bundle_id": "com.jetbrains.intellij"
      },
      {
        "name": "Sublime Text",
        "process_name": "Sublime Text",
        "bundle_id": "com.sublimetext.4"
      }
    ]
  },
  "win32": {
    "applications": [
      {
        "name": "Google Chrome",
        "process_name": "chrome.exe",
        "window_class": "Chrome_WidgetWin_1"
      },
      {
        "name": "IntelliJ IDEA",
        "process_name": "idea64.exe",
        "window_class": "SunAwtFrame"
      },
      {
        "name": "Sublime Text",
        "process_name": "sublime_text.exe",
        "window_class": "PX_WINDOW_CLASS"
      }
    ]
  },
  "linux": {
    "applications": [
      {
        "name": "Google Chrome",
        "process_name": "chrome",
        "window_class": "Google-chrome"
      },
      {
        "name": "IntelliJ IDEA",
        "process_name": "idea.sh",
        "window_class": "jetbrains-idea"
      },
      {
        "name": "Sublime Text",
        "process_name": "sublime_text",
        "window_class": "sublime_text"
      }
    ]
  }
}

================
File: src/codesimulator/resources/config.json
================
{
    "code": {
        "language": "php",
        "indent_size": 2,
        "max_line_length": 80
    },
    "typing_speed": {
        "min": 0.15,
        "max": 0.25,
        "line_break": [0.5, 1.0],
        "mistake_rate": 0.09
    }
}

================
File: src/codesimulator/resources/README
================
Put any application resources (e.g., icons and resources) here;
they can be referenced in code as "resources/filename".

================
File: src/codesimulator/__main__.py
================
from codesimulator.app import main

if __name__ == "__main__":
    main().main_loop()

================
File: src/codesimulator/actions.py
================
import asyncio
import os
import random
import sys
import json
from typing import Optional

import pyautogui

from .app_switcher import AppSwitcher
from .config import AppConfig
from .language_formatter import FormatterFactory
from .logging_config import logger
from .mouse import MouseController


class ActionSimulator:
    """Simulates keyboard and mouse actions for code typing simulation."""

    def __init__(self, text_box, app=None):
        self.text_box = text_box
        self.app = app
        self.loop_flag = False
        self._configure_pyautogui()
        self.app_config = AppConfig(app)
        self.app_switcher = AppSwitcher(self.app_config)
        self.formatter_factory = FormatterFactory()
        self.formatter = None
        self.mouse_controller = MouseController()
        self.simulation_mode = "Hybrid"  # default mode

        self.config = self._load_config()
        self._setup_from_config()

        # Get list of code files from 'resources/code'
        self.code_files = self._get_code_files()
        self.current_code_index = 0

        self.original_indentations = {}

    def _setup_from_config(self):
        try:
            code_config = self.config.get('code', {})
            self.language = code_config.get('language', 'python')
            self.indent_size = code_config.get('indent_size', 4)
            self.max_line_length = code_config.get('max_line_length', 80)
            typing_config = self.config.get('typing_speed', {})
            self.typing_speed = {
                'min': typing_config.get('min', 0.03),
                'max': typing_config.get('max', 0.07),
                'line_break': tuple(typing_config.get('line_break', [0.5, 1.0])),
                'mistake_rate': typing_config.get('mistake_rate', 0.07)
            }
            logger.info("Successfully configured simulation settings")
        except Exception as e:
            logger.error(f"Error setting up configuration: {e}")
            self._setup_default_config()

    def _setup_default_config(self):
        logger.warning("Using default configuration settings")
        self.language = 'python'
        self.indent_size = 4
        self.max_line_length = 80
        self.typing_speed = {
            'min': 0.03,
            'max': 0.07,
            'line_break': (0.5, 1.0),
            'mistake_rate': 0.07,
        }

    def _get_config_path(self) -> str:
        from .path_utils import get_resource_path
        config_path = get_resource_path(self.app, 'config.json')
        if not os.path.exists(config_path):
            logger.error(f"Config file not found at {config_path}")
            raise FileNotFoundError(f"Config file not found at {config_path}")
        return config_path

    def _get_code_files(self) -> list:
        """Return a list of .txt files from the 'resources/code' directory."""
        from .path_utils import get_resource_path
        code_dir = get_resource_path(self.app, 'code')
        if os.path.isdir(code_dir):
            files = [os.path.join(code_dir, f) for f in os.listdir(code_dir) if f.endswith(".txt")]
            if not files:
                logger.warning(f"No .txt files found in {code_dir}")
            return files
        else:
            logger.warning(f"Code directory not found: {code_dir}")
            return []

    def _load_config(self) -> dict:
        try:
            with open(self._get_config_path(), 'r') as f:
                config = json.load(f)
                logger.info("Successfully loaded configuration")
                return config
        except Exception as e:
            logger.error(f"Error loading config: {e}")
            raise

    def load_config(self):
        try:
            config_path = os.path.join(os.path.dirname(__file__), 'resources', 'config.json')
            logger.info(f"Loading config from: {config_path}")
            with open(config_path, "r") as f:
                config = json.load(f)
                code_config = config.get('code', {})
                self.language = code_config.get("language", "unknown")
                self.indent_size = code_config.get("indent_size", 4)
                self.max_line_length = code_config.get("max_line_length", 80)
        except Exception as e:
            logger.error(f"Error loading config: {e}")
            self.language = "unknown"
            self.indent_size = 4
            self.max_line_length = 80

    def _configure_pyautogui(self):
        try:
            import pyautogui
            pyautogui.FAILSAFE = True
            pyautogui.PAUSE = 0.1
            logger.info(f"PyAutoGUI initialized. Screen size: {pyautogui.size()}")
        except Exception as e:
            logger.error(f"Failed to initialize PyAutoGUI: {e}")
            self.text_box.value += f"⚠️ Warning: Failed to initialize PyAutoGUI: {e}\n"



    def get_next_code_file(self) -> Optional[str]:
        """Return the next code file in sequence (cycling through available files)."""
        if self.code_files:
            file_path = self.code_files[self.current_code_index]
            self.current_code_index = (self.current_code_index + 1) % len(self.code_files)
            return file_path
        return None

    def _split_file_into_chunks(self, file_path: str, chunk_size: int = 50) -> list:
        """Split the file into chunks of at most 'chunk_size' lines."""
        with open(file_path, "r") as f:
            lines = f.readlines()
        if len(lines) <= chunk_size:
            return [lines]
        chunks = [lines[i:i + chunk_size] for i in range(0, len(lines), chunk_size)]
        logger.info(f"Split file {file_path} into {len(chunks)} chunks")
        return chunks

    async def calculate_typing_time(self, file_path: str) -> dict:
        try:
            with open(file_path, "r") as file:
                lines = file.readlines()
            total_chars = sum(len(line.rstrip()) for line in lines)
            total_lines = len(lines)
            empty_lines = sum(1 for line in lines if not line.strip())
            non_empty_lines = total_lines - empty_lines

            avg_char_time = (self.typing_speed["min"] + self.typing_speed["max"]) / 2
            char_typing_time = total_chars * avg_char_time

            expected_mistakes = int(total_chars * self.typing_speed["mistake_rate"])
            mistake_time = expected_mistakes * (0.2 + 0.1)

            avg_line_break = sum(self.typing_speed["line_break"]) / 2
            line_break_time = non_empty_lines * avg_line_break
            empty_line_time = empty_lines * (avg_line_break * 0.5)

            total_time = char_typing_time + mistake_time + line_break_time + empty_line_time

            timing_details = {
                "total_time_seconds": round(total_time, 2),
                "total_time_formatted": self._format_time(total_time),
                "breakdown": {
                    "characters": {"count": total_chars, "time_seconds": round(char_typing_time, 2)},
                    "lines": {"total": total_lines, "empty": empty_lines, "non_empty": non_empty_lines,
                              "time_seconds": round(line_break_time + empty_line_time, 2)},
                    "expected_mistakes": {"count": expected_mistakes, "time_seconds": round(mistake_time, 2)},
                    "typing_speed": {"chars_per_second": round(1 / avg_char_time, 2),
                                     "avg_pause_between_lines": round(avg_line_break, 2)},
                },
            }
            logger.info(f"Estimated typing time: {timing_details['total_time_formatted']}")
            self.text_box.value += (
                f"Estimated typing time: {timing_details['total_time_formatted']}\n"
                f"Total characters: {total_chars}\n"
                f"Total lines: {total_lines}\n"
                f"Expected mistakes: {expected_mistakes}\n"
            )
            return timing_details

        except FileNotFoundError:
            logger.error(f"File not found: {file_path}")
            self.text_box.value += f"Error: File not found: {file_path}\n"
            return None
        except Exception as e:
            logger.error(f"Error calculating typing time: {e}")
            self.text_box.value += f"Error calculating typing time: {e}\n"
            return None

    def _format_time(self, seconds: float) -> str:
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        remaining_seconds = int(seconds % 60)
        if hours > 0:
            return f"{hours}h {minutes}m {remaining_seconds}s"
        elif minutes > 0:
            return f"{minutes}m {remaining_seconds}s"
        else:
            return f"{remaining_seconds}s"

    async def simulate_typing(self, file_path: Optional[str] = None):
        if self.simulation_mode == "Tab Switching Only":
            self.text_box.value += "Tab switching only mode selected. Skipping typing simulation...\n"
            return
        elif self.simulation_mode in ["Typing Only", "Hybrid"]:
            # Split file into chunks if long
            chunks = self._split_file_into_chunks(file_path, chunk_size=50)
            for i, chunk in enumerate(chunks):
                chunk_text = "".join(chunk)
                await self._simulate_code_typing_from_lines(chunk_text, i)
                await asyncio.sleep(random.uniform(*self.typing_speed["line_break"]))
        else:
            self.text_box.value += "Unknown simulation mode selected.\n"

    async def _simulate_code_typing_from_lines(self, text: str, chunk_index: int):
        lines = text.splitlines(keepends=True)
        original_indents = {i: len(line) - len(line.lstrip()) for i, line in enumerate(lines)}
        self.text_box.value += f"Typing chunk {chunk_index + 1}...\n"
        for i, line in enumerate(lines):
            if not self.loop_flag:
                break
            line = " " * original_indents.get(i, 0) + line.strip()
            if not line:
                pyautogui.press("enter")
                await asyncio.sleep(random.uniform(*self.typing_speed["line_break"]))
                continue
            await self._type_line_with_simulation(line, i)
            await asyncio.sleep(random.uniform(*self.typing_speed["line_break"]))

    async def _type_line_with_simulation(self, line: str, line_num: int):
        if self.formatter:
            line = self.formatter.format_line(line)
        for char in line:
            if not self.loop_flag:
                break
            if random.random() < self.typing_speed["mistake_rate"]:
                await self._simulate_typing_mistake(char)
            self._type_character(char)
            await asyncio.sleep(random.uniform(self.typing_speed["min"], self.typing_speed["max"]))
        pyautogui.press("enter")
        logger.info(f"Typed line: {line}")

    async def _simulate_typing_mistake(self, correct_char: str):
        wrong_char = random.choice("abcdefghijklmnopqrstuvwxyz")
        pyautogui.write(wrong_char)
        await asyncio.sleep(0.2)
        pyautogui.press("backspace")
        await asyncio.sleep(0.1)

    def _type_character(self, char: str):
        if char == "\t":
            pyautogui.press("tab")
        elif char == "\n":
            pyautogui.press("enter")
        else:
            pyautogui.write(char)

    def switch_window(self):
        app = self.app_switcher.get_random_running_app()
        if app:
            if self.app_switcher.focus_application(app):
                self.text_box.value += f"Switched to {app['name']}\n"
                logger.info(f"Switched to {app['name']}")
            else:
                self.text_box.value += f"Failed to switch to {app['name']}\n"
                logger.error(f"Failed to switch to {app['name']}")
        else:
            self.text_box.value += "No configured applications running\n"
            logger.warning("No configured applications running")

    async def _simulate_random_actions(self):
        while self.loop_flag:
            actions = [
                self._random_cursor_move,
                self._random_scroll,
                self._middle_click,
                self._window_switch_action,
            ]
            for action in actions:
                if not self.loop_flag:
                    break
                await action()
            await asyncio.sleep(random.uniform(0.3, 0.7))

    async def _random_cursor_move(self):
        x = random.randint(100, 1000)
        y = random.randint(100, 1000)
        pyautogui.moveTo(x, y, duration=0.5)
        logger.info(f"Moved cursor to ({x}, {y})")

    async def _random_scroll(self):
        scroll_amount = random.randint(-100, 100)
        pyautogui.scroll(scroll_amount)
        logger.info(f"Scrolled {scroll_amount}")
        await asyncio.sleep(0.5)
        pyautogui.move(100, 50, duration=0.5)
        logger.info("Moved mouse relatively by (100, 50).")
        await asyncio.sleep(0.5)
        pyautogui.move(-50, -25, duration=0.5)
        logger.info("Moved mouse relatively by (-50, -25).")
        await asyncio.sleep(0.5)

    async def _middle_click(self):
        if random.random() < 0.3:
            pyautogui.click(button="middle")
            logger.info("Middle clicked")

    async def _window_switch_action(self):
        if random.random() < 0.2:
            self.switch_window()
            await asyncio.sleep(0.5)

    async def _cleanup_simulation(self):
        await asyncio.sleep(0.5)

    def _handle_simulation_end(self):
        self.loop_flag = False
        self.mouse_controller.stop()
        self.text_box.value += "Simulation ended\n"
        logger.info("Simulation ended")

================
File: src/codesimulator/app_switcher.py
================
import sys
import subprocess
from typing import Optional, List, Dict
import random
from .logging_config import logger


class AppSwitcher:
    """
    Handles application switching across different platforms (macOS, Windows, Linux).
    Supports focusing applications and retrieving running application lists.
    """

    def __init__(self, config):
        """
        Initialize AppSwitcher with configuration.

        Args:
            config: Configuration object that provides application settings
        """
        self.config = config
        self.platform = sys.platform
        self._quartz = None
        self._win32gui = None
        self._win32process = None
        self._display = None
        self._setup_platform_handler()

    def _setup_platform_handler(self):
        """Set up the platform-specific handler based on the current operating system."""
        try:
            if self.platform == 'darwin':
                self._setup_macos_handler()
            elif self.platform == 'win32':
                self._setup_windows_handler()
            else:
                self._setup_linux_handler()
        except Exception as e:
            logger.error(f"Failed to setup platform handler: {e}")
            raise RuntimeError(f"Platform setup failed: {e}")

    def _setup_macos_handler(self):
        """Set up macOS specific handler by importing required modules."""
        try:
            import Quartz
            self._quartz = Quartz
        except ImportError as e:
            logger.error(f"Failed to import Quartz module for macOS: {e}")
            raise ImportError("Quartz module is required for macOS support")

    def _setup_windows_handler(self):
        """Set up Windows specific handler by importing required modules."""
        try:
            import win32gui
            import win32process
            self._win32gui = win32gui
            self._win32process = win32process
        except ImportError as e:
            logger.error(f"Failed to import win32gui/win32process modules: {e}")
            raise ImportError("win32gui and win32process modules are required for Windows support")

    def _setup_linux_handler(self):
        """Set up Linux specific handler by importing required modules."""
        try:
            import Xlib.display
            self._display = Xlib.display.Display()
        except ImportError as e:
            logger.error(f"Failed to import Xlib module: {e}")
            raise ImportError("Xlib module is required for Linux support")

    def _remove_duplicates(self, apps: List[Dict]) -> List[Dict]:
        """
        Remove duplicate applications based on their unique identifiers.

        Args:
            apps: List of application dictionaries

        Returns:
            List of unique application dictionaries
        """
        seen = set()
        unique_apps = []
        for app in apps:
            # Create a unique identifier from sorted items
            identifier = tuple(sorted((k, str(v)) for k, v in app.items()))
            if identifier not in seen:
                seen.add(identifier)
                unique_apps.append(app)
        return unique_apps

    def get_running_applications(self) -> List[Dict]:
        """
        Get list of configured applications that are currently running.

        Returns:
            List of running application configurations
        """
        if self.platform == 'darwin':
            return self._get_running_applications_macos()
        elif self.platform == 'win32':
            return self._get_running_applications_windows()
        else:
            return self._get_running_applications_linux()

    def _get_running_applications_macos(self) -> List[Dict]:
        """
        Get running applications on macOS.

        Returns:
            List of running application configurations
        """
        running_apps = []
        try:
            window_list = self._quartz.CGWindowListCopyWindowInfo(
                self._quartz.kCGWindowListOptionOnScreenOnly |
                self._quartz.kCGWindowListExcludeDesktopElements,
                self._quartz.kCGNullWindowID
            )

            if window_list:
                window_list = list(window_list)

            for app in self.config.get_applications():
                app_name = app.get('process_name', '')
                bundle_id = app.get('bundle_id', '')

                for window in window_list:
                    owner = window.get(self._quartz.kCGWindowOwnerName, '')
                    owner_bundle = window.get('kCGWindowOwnerBundleID', '')

                    if (owner and owner == app_name) or \
                            (bundle_id and owner_bundle == bundle_id):
                        running_apps.append(app.copy())
                        break

        except Exception as e:
            logger.error(f"Error getting macOS running applications: {e}")
            return []

        return self._remove_duplicates(running_apps)

    def _get_running_applications_windows(self) -> List[Dict]:
        """
        Get running applications on Windows.

        Returns:
            List of running application configurations
        """
        running_apps = []
        try:
            def callback(hwnd, apps):
                if not self._win32gui.IsWindowVisible(hwnd):
                    return True

                try:
                    _, pid = self._win32process.GetWindowThreadProcessId(hwnd)
                    class_name = self._win32gui.GetClassName(hwnd)

                    for app in self.config.get_applications():
                        if class_name == app.get('window_class'):
                            apps.append(app.copy())
                except Exception as e:
                    logger.debug(f"Error processing window {hwnd}: {e}")
                return True

            self._win32gui.EnumWindows(callback, running_apps)
        except Exception as e:
            logger.error(f"Error getting Windows running applications: {e}")
            return []

        return self._remove_duplicates(running_apps)

    def _get_running_applications_linux(self) -> List[Dict]:
        """
        Get running applications on Linux.

        Returns:
            List of running application configurations
        """
        running_apps = []
        try:
            root = self._display.screen().root
            window_ids = root.get_full_property(
                self._display.intern_atom('_NET_CLIENT_LIST'),
                self._display.intern_atom('WINDOW')
            ).value

            for window_id in window_ids:
                window = self._display.create_resource_object('window', window_id)
                try:
                    window_class = window.get_wm_class()
                    if window_class:
                        for app in self.config.get_applications():
                            if app.get('window_class') in window_class:
                                running_apps.append(app.copy())
                except Exception as e:
                    logger.debug(f"Error processing window {window_id}: {e}")
                    continue

        except Exception as e:
            logger.error(f"Error getting Linux running applications: {e}")
            return []

        return self._remove_duplicates(running_apps)

    def get_random_running_app(self) -> Optional[Dict]:
        """
        Get a random running application from the configured list.

        Returns:
            Random application configuration or None if no applications are running
        """
        running_apps = self.get_running_applications()
        return random.choice(running_apps) if running_apps else None

    def focus_application(self, app_info: Dict) -> bool:
        """
        Focus on a specific application.

        Args:
            app_info: Dictionary containing application information

        Returns:
            bool: True if focus was successful, False otherwise
        """
        if not app_info:
            logger.error("Cannot focus: app_info is None or empty")
            return False

        try:
            if self.platform == 'darwin':
                app_name = app_info.get("name")
                if not app_name:
                    raise ValueError("No application name provided")
                subprocess.run(
                    ['osascript', '-e', f'tell application "{app_name}" to activate'],
                    check=True,
                    capture_output=True,
                    text=True
                )

            elif self.platform == 'win32':
                window_class = app_info.get('window_class')
                if not window_class:
                    raise ValueError("No window class provided")

                def callback(hwnd, class_name):
                    try:
                        if (self._win32gui.IsWindowVisible(hwnd) and
                                self._win32gui.GetClassName(hwnd) == class_name):
                            self._win32gui.SetForegroundWindow(hwnd)
                            return False
                    except Exception as e:
                        logger.error(f"Error setting foreground window: {e}")
                    return True

                self._win32gui.EnumWindows(callback, window_class)

            else:  # Linux
                app_name = app_info.get("name")
                if not app_name:
                    raise ValueError("No application name provided")
                subprocess.run(
                    ['wmctrl', '-a', app_name],
                    check=True,
                    capture_output=True,
                    text=True
                )

            return True

        except subprocess.CalledProcessError as e:
            logger.error(f"Command failed with return code {e.returncode}: {e.output}")
            return False
        except Exception as e:
            logger.error(f"Error focusing application {app_info.get('name', 'unknown')}: {e}")
            return False

================
File: src/codesimulator/app.py
================
import asyncio
import os
import tempfile
import platform
import subprocess
import sys
from typing import Optional
import toga
from toga.style import Pack
from toga.style.pack import COLUMN, ROW, CENTER
from toga.colors import rgb
from .actions import ActionSimulator
from .key_handler import GlobalKeyHandler
from .logging_config import get_log_path, setup_file_logging, logger
from .path_utils import log_environment_info, get_log_path

log_environment_info()


class CodeSimulator(toga.App):
    def __init__(self):
        super().__init__(
            formal_name="Code Simulator",
            app_id="com.example.codesimulator"
        )
        # Store a manually selected file (if any)
        self.selected_file = None

    async def show_debug_info(self, widget):

        # Get system information
        info = {
            "OS": platform.system(),
            "OS Version": platform.version(),
            "Python Version": platform.python_version(),
            "App Directory": os.path.dirname(os.path.abspath(__file__)),
            "Current Directory": os.getcwd(),
            "Log File": get_log_path(),
            "Is Packaged": getattr(sys, 'frozen', False),
            "Executable": sys.executable
        }

        # Display in text box
        self.text_box.value = "--- Debug Information ---\n\n"
        for key, value in info.items():
            self.text_box.value += f"{key}: {value}\n"

        # Log detailed info for troubleshooting
        log_environment_info()

        self.text_box.value += "\nDetailed debug information has been logged to the log file.\n"

    async def view_console_logs(self, widget):
        """View recent console output (for macOS/Linux only)"""
        try:
            if platform.system() == "Darwin":  # macOS
                # Get last 50 lines from system log for this app
                process = subprocess.Popen(
                    ["log", "show", "--predicate", "process == 'Code Simulator'", "--last", "1h"],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True
                )
                stdout, stderr = process.communicate(timeout=5)

                if stdout:
                    self.text_box.value = "Recent Console Logs:\n\n" + stdout
                else:
                    self.text_box.value = "No recent console logs found.\n"
                    if stderr:
                        self.text_box.value += f"Error: {stderr}\n"
            else:
                self.text_box.value = "Console log viewing only supported on macOS."
        except Exception as e:
            self.text_box.value = f"Error viewing console logs: {e}"

    async def view_logs(self, widget):


        # Ensure file logging is set up
        setup_file_logging()

        # Get log path
        log_path = get_log_path()

        # Clear text box
        self.text_box.value = "Log Information\n"
        self.text_box.value += "=============\n\n"
        self.text_box.value += f"Log file location: {log_path}\n\n"

        # Write a test log message
        logger.info("Test log message from View Logs button")

        # Check if log file exists now
        if not os.path.exists(log_path):
            self.text_box.value += f"❌ Log file still not found after write attempt!\n\n"

            # Try to create a simple text file in the same directory to test permissions
            try:
                log_dir = os.path.dirname(log_path)
                test_file_path = os.path.join(log_dir, "test_write.txt")
                with open(test_file_path, 'w') as f:
                    f.write("Test write")
                self.text_box.value += f"✓ Successfully created test file at: {test_file_path}\n"
                os.remove(test_file_path)  # Clean up
            except Exception as e:
                self.text_box.value += f"❌ Could not write test file: {e}\n"
                self.text_box.value += "This suggests a permissions issue or the directory doesn't exist\n"

            # Print environment variables to help debug
            self.text_box.value += "\nEnvironment Information:\n"
            self.text_box.value += f"Working directory: {os.getcwd()}\n"
            self.text_box.value += f"Home directory: {os.path.expanduser('~')}\n"
            self.text_box.value += f"App directory: {os.path.dirname(__file__)}\n"
            self.text_box.value += f"Python executable: {sys.executable}\n"
            self.text_box.value += f"Is packaged: {getattr(sys, 'frozen', False)}\n"

            # Suggest a location for logs
            self.text_box.value += "\nTry looking for logs in these locations:\n"
            self.text_box.value += f"1. {os.path.join(os.path.expanduser('~'), 'Library', 'Logs', 'CodeSimulator')}\n"
            self.text_box.value += f"2. {tempfile.gettempdir()}\n"

            return

        # Display file stats
        file_size = os.path.getsize(log_path)
        last_modified = os.path.getmtime(log_path)
        import datetime
        mod_time = datetime.datetime.fromtimestamp(last_modified).strftime('%Y-%m-%d %H:%M:%S')

        self.text_box.value += f"Log file size: {file_size} bytes\n"
        self.text_box.value += f"Last modified: {mod_time}\n\n"

        # Read and display log content
        try:
            with open(log_path, 'r') as f:
                # For larger files, just get the last part
                if file_size > 10000:
                    self.text_box.value += f"Log file is large. Showing last portion...\n\n"
                    f.seek(max(0, file_size - 10000))
                    # Skip potentially incomplete first line
                    f.readline()
                    content = f.read()
                else:
                    content = f.read()

            # Display content
            self.text_box.value += "Log Content:\n"
            self.text_box.value += "===========\n\n"
            self.text_box.value += content

        except Exception as e:
            self.text_box.value += f"❌ Error reading log file: {e}\n"

    def startup(self):
        # Ensure logging is set up
        from .logging_config import setup_file_logging
        setup_file_logging()

        # Continue with normal startup
        self.setup_ui()
        self.setup_components()
        logger.info("Application started successfully.")

    def setup_ui(self):
        # Create a modern color scheme
        self.colors = {
            'primary': rgb(60, 120, 200),  # Blue
            'accent': rgb(60, 180, 100),  # Green
            'danger': rgb(220, 70, 70),  # Red
            'background': rgb(250, 250, 252),  # Off-white
            'card': rgb(255, 255, 255),  # White
            'text': rgb(50, 50, 50),  # Dark grey
            'text_light': rgb(120, 120, 120)  # Light grey
        }

        # Main box with column layout
        main_box = toga.Box(style=Pack(direction=COLUMN, padding=10))

        # Title header
        header = toga.Box(style=Pack(direction=COLUMN, padding=10, background_color=self.colors['primary']))
        title = toga.Label(
            "Code Simulator",
            style=Pack(
                font_size=24,
                font_weight="bold",
                padding=5,
                color=rgb(255, 255, 255),
                text_align=CENTER
            )
        )
        subtitle = toga.Label(
            "Select mode and code file, then start simulation",
            style=Pack(
                font_size=14,
                padding=(0, 5, 5, 5),
                color=rgb(220, 220, 220),
                text_align=CENTER
            )
        )

        header.add(title)
        header.add(subtitle)
        main_box.add(header)

        # Content container with two columns
        content = toga.Box(style=Pack(direction=ROW, padding=10))

        # Left column - Controls
        left_column = toga.Box(style=Pack(direction=COLUMN, padding=10, flex=1))

        # Mode selection
        mode_label = toga.Label(
            "Simulation Mode:",
            style=Pack(padding=(0, 0, 5, 0), font_weight="bold")
        )
        self.simulation_modes = ["Typing Only", "Tab Switching Only", "Hybrid"]
        self.mode_selector = toga.Selection(
            items=self.simulation_modes,
            value=self.simulation_modes[2],
            style=Pack(padding=(0, 0, 20, 0))
        )
        # Add View Logs button
        view_logs_button = toga.Button(
            "View Logs",
            on_press=self.view_logs,
            style=Pack(padding=5, background_color=self.colors['accent'], color=rgb(255, 255, 255))
        )
        debug_info_button = toga.Button(
            "Debug Info",
            on_press=self.show_debug_info,
            style=Pack(padding=5, background_color=self.colors['primary'], color=rgb(255, 255, 255))
        )

        # Add Console Logs button
        console_logs_button = toga.Button(
            "View Console Logs",
            on_press=self.view_console_logs,
            style=Pack(padding=5, background_color=self.colors['primary'], color=rgb(255, 255, 255))
        )
        left_column.add(console_logs_button)
        left_column.add(debug_info_button)
        left_column.add(view_logs_button)
        left_column.add(mode_label)
        left_column.add(self.mode_selector)

        # File selection
        file_label = toga.Label(
            "Selected File:",
            style=Pack(padding=(0, 0, 5, 0), font_weight="bold")
        )
        self.file_display = toga.Label(
            "Using default resources/code files",
            style=Pack(padding=(0, 0, 10, 0), color=self.colors['text_light'])
        )
        choose_file_button = toga.Button(
            "Choose File",
            on_press=self.choose_file,
            style=Pack(padding=5, background_color=self.colors['accent'], color=rgb(255, 255, 255))
        )
        left_column.add(file_label)
        left_column.add(self.file_display)
        left_column.add(choose_file_button)

        # Action buttons
        button_box = toga.Box(style=Pack(direction=ROW, padding=(20, 0, 10, 0)))
        self.start_button = toga.Button(
            "Start Simulation",
            on_press=self.start_simulation,
            style=Pack(padding=5, background_color=self.colors['primary'], color=rgb(255, 255, 255))
        )
        self.stop_button = toga.Button(
            "Stop Simulation",
            on_press=self.stop_simulation,
            style=Pack(padding=5, background_color=self.colors['danger'], color=rgb(255, 255, 255)),
            enabled=False
        )
        button_box.add(self.start_button)
        button_box.add(toga.Box(style=Pack(flex=1)))  # Spacer
        button_box.add(self.stop_button)
        left_column.add(button_box)

        # Information box
        info_box = toga.Box(style=Pack(direction=COLUMN, padding=(20, 0, 0, 0)))
        info_label = toga.Label(
            "Keyboard Shortcuts:",
            style=Pack(padding=(0, 0, 5, 0), font_weight="bold")
        )
        info_text = toga.Label(
            "⌘+S: Start Simulation\n⌘+X: Stop Simulation",
            style=Pack(color=self.colors['text_light'])
        )
        info_box.add(info_label)
        info_box.add(info_text)
        left_column.add(info_box)

        # Right column - Output
        right_column = toga.Box(style=Pack(direction=COLUMN, padding=10, flex=2))
        output_label = toga.Label(
            "Simulation Log:",
            style=Pack(padding=(0, 0, 5, 0), font_weight="bold")
        )
        self.text_box = toga.MultilineTextInput(
            readonly=True,
            style=Pack(flex=1, background_color=rgb(245, 245, 250))
        )
        right_column.add(output_label)
        right_column.add(self.text_box)

        # Add columns to content
        content.add(left_column)
        content.add(right_column)

        # Add content to main box
        main_box.add(content)

        # Configure main window
        self.main_window = toga.MainWindow(title=self.formal_name)
        self.main_window.content = main_box

        # Global keyboard shortcuts
        cmd_s = toga.Command(
            self.start_simulation,
            "Start Simulation",
            shortcut=toga.Key.MOD_1 + "s"
        )
        cmd_x = toga.Command(
            self.stop_simulation,
            "Stop Simulation",
            shortcut=toga.Key.MOD_1 + "x"
        )
        self.commands.add(cmd_s, cmd_x)
        self.main_window.show()

    def setup_components(self):
        self.action_simulator = ActionSimulator(self.text_box, self)
        self.key_handler = GlobalKeyHandler(self, self.action_simulator)
        self.simulation_task = None

    async def choose_file(self, widget):
        # Use the Toga dialog API for file selection
        dialog = toga.OpenFileDialog(
            title="Select a Code File",
            file_types=["txt"]
        )
        file_paths = await self.main_window.dialog(dialog)
        if file_paths:
            # Assuming single file selection
            self.selected_file = file_paths[0]
            # Only show the filename, not the entire path
            filename = os.path.basename(self.selected_file)
            self.file_display.text = f"Selected: {filename}"
            logger.info(f"Selected file: {self.selected_file}")
        else:
            self.selected_file = None
            self.file_display.text = "Using default resources/code files"
            logger.info("No file selected; using default.")

    async def start_simulation(self, widget):
        if not self.action_simulator.loop_flag:
            try:
                self.text_box.value = "🚀 Starting simulation...\n"
                self.update_button_states(running=True)
                self.action_simulator.loop_flag = True

                # Set simulation mode based on user selection
                selected_mode = self.mode_selector.value
                self.action_simulator.simulation_mode = selected_mode
                self.text_box.value += f"▶️ Mode: {selected_mode}\n"

                # If a file has been manually chosen and mode requires typing, pass that file.
                if self.selected_file and selected_mode in ["Typing Only", "Hybrid"]:
                    file_to_use = self.selected_file
                    filename = os.path.basename(file_to_use)
                    self.text_box.value += f"📄 Using selected file: {filename}\n"
                else:
                    file_to_use = None  # simulator will fall back to cycling default files
                    self.text_box.value += "📄 Using default code samples\n"

                if not self.simulation_task:
                    self.text_box.value += "⏳ Calculating typing time...\n"
                    self.simulation_task = asyncio.create_task(self.run_continuous_simulation(file_to_use))
                logger.info("Simulation started successfully.")
            except Exception as e:
                logger.error(f"Error starting simulation: {e}")
                await self.stop_simulation(widget)

    async def run_continuous_simulation(self, file_to_use: Optional[str]):
        try:
            while self.action_simulator.loop_flag:
                # If a file was manually chosen, use it; else, get the next available file.
                next_file = file_to_use if file_to_use else self.action_simulator.get_next_code_file()
                if not next_file:
                    self.text_box.value += "❌ No code files found in resources/code directory.\n"
                    await asyncio.sleep(2)
                    continue

                # Calculate estimated typing time
                if self.action_simulator.simulation_mode in ["Typing Only", "Hybrid"]:
                    await self.action_simulator.calculate_typing_time(next_file)

                # Run appropriate simulation based on mode
                if self.action_simulator.simulation_mode == "Typing Only":
                    self.text_box.value += "⌨️ Simulating typing...\n"
                    await self.action_simulator.simulate_typing(next_file)
                elif self.action_simulator.simulation_mode == "Tab Switching Only":
                    self.text_box.value += "🔄 Switching between applications...\n"
                    self.action_simulator.switch_window()
                    await asyncio.sleep(2)
                elif self.action_simulator.simulation_mode == "Hybrid":
                    self.text_box.value += "⌨️ Simulating typing...\n"
                    await self.action_simulator.simulate_typing(next_file)
                    self.text_box.value += "🔄 Switching between applications...\n"
                    self.action_simulator.switch_window()
                    await asyncio.sleep(2)

                filename = os.path.basename(next_file)
                self.text_box.value += f"\n✅ Finished simulating file: {filename}\n"
                self.text_box.value += "🔄 Cycle completed. Restarting...\n\n"
                await asyncio.sleep(2)
        except asyncio.CancelledError:
            self.text_box.value += "⏹️ Simulation task cancelled.\n"
        except Exception as e:
            self.text_box.value += f"❌ Error during simulation: {str(e)}\n"
            logger.error(f"Error in continuous simulation: {e}")
            self.stop_simulation(None)

    async def stop_simulation(self, widget):
        if self.action_simulator.loop_flag:
            try:
                self.text_box.value += "⏹️ Stopping simulation...\n"
                self.action_simulator.loop_flag = False
                self.update_button_states(running=False)
                if self.simulation_task:
                    self.simulation_task.cancel()
                    self.simulation_task = None
                logger.info("Simulation stopped successfully.")
            except Exception as e:
                logger.error(f"Error stopping simulation: {e}")

    def update_button_states(self, running: bool):
        self.start_button.enabled = not running
        self.stop_button.enabled = running


def main():
    return CodeSimulator()

================
File: src/codesimulator/config.py
================
import sys
import json
import os

from typing import Dict, List
from .logging_config import logger

DEFAULT_APPS = {
    'darwin': {  # macOS
        'applications': [
            {
                'name': 'Google Chrome',
                'process_name': 'Google Chrome',
                'bundle_id': 'com.google.Chrome',
            },
            {
                'name': 'IntelliJ IDEA',
                'process_name': 'IntelliJ IDEA',
                'bundle_id': 'com.jetbrains.intellij',
            },
            {
                'name': 'Sublime Text',
                'process_name': 'Sublime Text',
                'bundle_id': 'com.sublimetext.4',
            }
        ]
    },
    'win32': {  # Windows
        'applications': [
            {
                'name': 'Google Chrome',
                'process_name': 'chrome.exe',
                'window_class': 'Chrome_WidgetWin_1',
            },
            {
                'name': 'IntelliJ IDEA',
                'process_name': 'idea64.exe',
                'window_class': 'SunAwtFrame',
            },
            {
                'name': 'Sublime Text',
                'process_name': 'sublime_text.exe',
                'window_class': 'PX_WINDOW_CLASS',
            }
        ]
    },
    'linux': {  # Linux
        'applications': [
            {
                'name': 'Google Chrome',
                'process_name': 'chrome',
                'window_class': 'Google-chrome',
            },
            {
                'name': 'IntelliJ IDEA',
                'process_name': 'idea.sh',
                'window_class': 'jetbrains-idea',
            },
            {
                'name': 'Sublime Text',
                'process_name': 'sublime_text',
                'window_class': 'sublime_text',
            }
        ]
    }
}


class AppConfig:
    def __init__(self, app=None):
        self.app = app
        self.config_path = self._get_config_path()
        self.platform = sys.platform
        self.apps = self._load_config()

    def _get_config_path(self) -> str:
        """Get the path to the configuration file."""
        from .path_utils import get_resource_path
        return get_resource_path(self.app, 'applications.json')

    def _load_config(self) -> Dict:
        """Load the configuration file or create default if it doesn't exist."""
        try:
            if os.path.exists(self.config_path):
                with open(self.config_path, 'r') as f:
                    config = json.load(f)
                    if self.platform in config:
                        return config

            # If config doesn't exist or platform not found, use defaults
            return self._create_default_config()
        except Exception as e:
            logger.error(f"Error loading config3: {e}")
            return self._create_default_config()

    def _create_default_config(self) -> Dict:
        """Create and save default configuration."""
        config = DEFAULT_APPS
        try:
            with open(self.config_path, 'w') as f:
                json.dump(config, f, indent=4)
        except Exception as e:
            logger.error(f"Error saving default config: {e}")
        return config

    def get_applications(self) -> List[Dict]:
        """Get the list of applications for the current platform."""
        return self.apps.get(self.platform, {}).get('applications', [])

    def add_application(self, app_info: Dict) -> bool:
        """Add a new application to the configuration."""
        try:
            if self.platform not in self.apps:
                self.apps[self.platform] = {'applications': []}

            self.apps[self.platform]['applications'].append(app_info)

            with open(self.config_path, 'w') as f:
                json.dump(self.apps, f, indent=4)
            return True
        except Exception as e:
            logger.error(f"Error adding application: {e}")
            return False

    def remove_application(self, app_name: str) -> bool:
        """Remove an application from the configuration."""
        try:
            if self.platform in self.apps:
                apps = self.apps[self.platform]['applications']
                self.apps[self.platform]['applications'] = [
                    app for app in apps if app['name'] != app_name
                ]

                with open(self.config_path, 'w') as f:
                    json.dump(self.apps, f, indent=4)
                return True
        except Exception as e:
            logger.error(f"Error removing application: {e}")
        return False

================
File: src/codesimulator/key_handler.py
================
import asyncio
from platform import system
from .logging_config import logger


class GlobalKeyHandler:
    """Handles global keyboard events across different platforms."""

    def __init__(self, app, action_simulator):
        """Initialize the key handler."""
        self.app = app
        self.action_simulator = action_simulator
        self.platform = system()
        self._setup_platform_handler()

    def _setup_platform_handler(self):
        """Set up the platform-specific key handler."""
        try:
            if self.platform == 'Darwin':
                self._setup_macos_handler()
            else:
                logger.info(f"Using default key handling for platform: {self.platform}")
        except Exception as e:
            logger.error(f"Error setting up key handler: {e}")

    def _setup_macos_handler(self):
        """Set up macOS-specific key handling using AppKit."""
        try:
            from AppKit import NSEvent, NSKeyDownMask

            def handle_ns_event(event):
                if event.type() == NSKeyDownMask:
                    key = event.charactersIgnoringModifiers()
                    if key in ["+", "="]:
                        self.toggle_simulation()
                    elif key == "-":
                        self.app.stop_simulation(None)

            NSEvent.addGlobalMonitorForEventsMatchingMask_handler_(
                NSKeyDownMask,
                handle_ns_event
            )
            logger.info("MacOS key handler initialized successfully")
        except Exception as e:
            logger.error(f"Failed to initialize MacOS key handler: {e}")

    async def run(self):
        """Run the key handler background task."""
        try:
            logger.info("Global key handler started")
            while True:
                await asyncio.sleep(0.1)
        except asyncio.CancelledError:
            logger.info("Key handler task cancelled")
        except Exception as e:
            logger.error(f"Error in key handler: {e}")

    def toggle_simulation(self):
        """Toggle the simulation state."""
        try:
            if self.action_simulator.loop_flag:
                self.app.stop_simulation(None)
            else:
                self.app.start_simulation(None)
        except Exception as e:
            logger.error(f"Error toggling simulation: {e}")

    def cleanup(self):
        """Clean up resources and handlers."""
        try:
            if self.platform == 'Darwin':
                # Add cleanup for MacOS specific resources if needed
                pass
            logger.info("Key handler cleanup completed")
        except Exception as e:
            logger.error(f"Error during key handler cleanup: {e}")

================
File: src/codesimulator/language_formatter.py
================
import re
from .logging_config import logger


class LanguageFormatter:
    """Base class for language-specific formatters."""

    def __init__(self, indent_size=4):
        self.indent_size = indent_size
        self.indent_level = 0
        self.indent_style = " " * indent_size

    def format_line(self, line: str) -> str:
        """Format a single line of code.

        This is a base method that should be overridden by subclasses.
        """
        line = line.strip()

        # Handle indentation
        if line.endswith("{") or line.endswith("("):
            indented_line = self.indent_style * self.indent_level + line
            self.indent_level += 1
        elif line.startswith("}") or line.startswith(")"):
            self.indent_level = max(0, self.indent_level - 1)
            indented_line = self.indent_style * self.indent_level + line
        else:
            indented_line = self.indent_style * self.indent_level + line

        return indented_line


class JavaFormatter(LanguageFormatter):
    """Formatter for Java code."""

    def format_line(self, line: str) -> str:
        """Format a single line of Java code."""
        line = super().format_line(line)  # Apply base formatting first

        # Add Java-specific formatting rules here:
        # Example: Add a space after commas in argument lists
        line = re.sub(r"(?<=\w),(?=\w)", ", ", line)

        # Example: Ensure class, method, and if/else/for blocks are indented correctly
        if line.endswith("{"):
            indented_line = self.indent_style * self.indent_level + line
            self.indent_level += 1
        elif line.startswith("}"):
            self.indent_level = max(0, self.indent_level - 1)
            indented_line = self.indent_style * self.indent_level + line
        elif (
                line.startswith("if")
                or line.startswith("else")
                or line.startswith("for")
                or line.startswith("while")
        ):
            indented_line = self.indent_style * self.indent_level + line
            self.indent_level += 1
        else:
            indented_line = self.indent_style * self.indent_level + line

        return indented_line


class PythonFormatter(LanguageFormatter):
    """Formatter for Python code."""

    def format_line(self, line: str) -> str:
        """Format a single line of Python code."""
        line = super().format_line(line)  # Apply base formatting first

        # Add Python-specific formatting rules here:
        # Example: Ensure colons are at the end of if/else/for/def lines
        if re.match(
                r"^(if|elif|else|for|while|try|except|finally|def|class)\b.*[^:]$", line
        ):
            line = line + ":"

        return line


class PHPFormatter(LanguageFormatter):
    """Formatter for PHP code."""

    def format_line(self, line: str) -> str:
        """Format a single line of PHP code."""
        line = super().format_line(line)

        # Add PHP-specific formatting rules here:
        # Example: Add spaces around operators
        line = re.sub(r"(\s*)(=|!=|==|<=|>=|<|>|\+|-|\*|\/|%|&&|\|\|)(\s*)", r" \1 ", line)

        # Example: Add spaces after commas
        line = re.sub(r"(,)(?=\S)", r"$1 ", line)

        # Example: Remove spaces before closing parenthesis
        line = re.sub(r"\s+\)", ")", line)

        # Ensure class, method, and if/else/for blocks are indented correctly
        if line.endswith("{"):
            indented_line = self.indent_style * self.indent_level + line
            self.indent_level += 1
        elif line.startswith("}"):
            self.indent_level = max(0, self.indent_level - 1)
            indented_line = self.indent_style * self.indent_level + line
        elif (
                line.startswith("if")
                or line.startswith("else")
                or line.startswith("elseif")
                or line.startswith("for")
                or line.startswith("foreach")
                or line.startswith("while")
                or line.startswith("function")
        ):
            indented_line = self.indent_style * self.indent_level + line
            self.indent_level += 1
        else:
            indented_line = self.indent_style * self.indent_level + line

        return indented_line


# Add more formatters for other languages (e.g., CppFormatter, JavaScriptFormatter, etc.)


class FormatterFactory:
    """Factory class to create formatters based on language."""

    @staticmethod
    def create_formatter(language: str, indent_size: int = 4) -> LanguageFormatter:
        """Create a formatter for the given language."""
        if language == "java":
            return JavaFormatter(indent_size)
        elif language == "python":
            return PythonFormatter(indent_size)
        elif language == "php":
            return PHPFormatter(indent_size)
        # Add cases for other languages here
        else:
            logger.warning(
                f"No specific formatter found for {language}. Using default formatter."
            )
            return LanguageFormatter(indent_size)

================
File: src/codesimulator/logging_config.py
================
import logging
import logging.handlers
import os
import sys
import tempfile
import platform

# Create a custom logger
logger = logging.getLogger('codesimulator')
logger.setLevel(logging.DEBUG)

# Always set up console logging
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

# Flag to track if file logging has been set up
_file_logging_initialized = False


def get_log_path():
    """Get a guaranteed writable log file path"""
    try:
        # For macOS (which is what you're using)
        if platform.system() == "Darwin":
            # This directory should always be writable for the current user on macOS
            log_dir = os.path.join(os.path.expanduser('~'), 'Library', 'Logs', 'CodeSimulator')
        else:
            # For other platforms
            log_dir = os.path.join(tempfile.gettempdir(), 'CodeSimulator', 'logs')

        # Ensure directory exists
        os.makedirs(log_dir, exist_ok=True)

        # Return full path
        return os.path.join(log_dir, 'codesimulator.log')
    except Exception:
        # Ultimate fallback - use temp directory
        return os.path.join(tempfile.gettempdir(), 'codesimulator.log')


def setup_file_logging():
    """Set up file logging"""
    global _file_logging_initialized

    # Only initialize once
    if _file_logging_initialized:
        return

    try:
        # Get log path
        log_file_path = get_log_path()

        # Create handler
        file_handler = logging.handlers.RotatingFileHandler(
            log_file_path, maxBytes=5 * 1024 * 1024, backupCount=2
        )
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(formatter)

        # Add to logger
        logger.addHandler(file_handler)

        # Mark as initialized
        _file_logging_initialized = True

        # Log startup information
        logger.info(f"File logging initialized at: {log_file_path}")

    except Exception as e:
        # If file logging fails, log to console
        logger.error(f"Failed to set up file logging: {e}")


# Initialize file logging at module import time
setup_file_logging()

================
File: src/codesimulator/mouse.py
================
import asyncio
import random
import pyautogui
from typing import Optional, Tuple
from .logging_config import logger


class MouseController:
    """Handles random mouse movements independently of typing simulation."""

    def __init__(self):
        """Initialize the mouse controller."""
        self.is_active = False
        self.screen_width, self.screen_height = pyautogui.size()
        self.movement_task: Optional[asyncio.Task] = None

    async def start_random_movement(self,
                                    min_interval: float = 5.0,
                                    max_interval: float = 15.0,
                                    excluded_zone: Optional[Tuple[int, int, int, int]] = None):
        """
        Start random mouse movement in background.

        Args:
            min_interval: Minimum time between movements in seconds
            max_interval: Maximum time between movements in seconds
            excluded_zone: Tuple of (x1, y1, x2, y2) defining area to avoid
        """
        self.is_active = True

        while self.is_active:
            try:
                # Generate random position
                x = random.randint(0, self.screen_width)
                y = random.randint(0, self.screen_height)

                # Skip if in excluded zone
                if excluded_zone:
                    x1, y1, x2, y2 = excluded_zone
                    if x1 <= x <= x2 and y1 <= y <= y2:
                        continue

                # Calculate smooth movement duration based on distance
                current_x, current_y = pyautogui.position()
                distance = ((x - current_x) ** 2 + (y - current_y) ** 2) ** 0.5
                duration = min(2.0, distance / 1000)  # Cap at 2 seconds

                # Move mouse smoothly
                pyautogui.moveTo(x, y, duration=duration)
                logger.debug(f"Moved mouse to ({x}, {y})")

                # Random wait before next movement
                wait_time = random.uniform(min_interval, max_interval)
                await asyncio.sleep(wait_time)

            except Exception as e:
                logger.error(f"Error in mouse movement: {e}")
                await asyncio.sleep(1)  # Brief pause before retry

    def start(self,
              min_interval: float = 5.0,
              max_interval: float = 15.0,
              excluded_zone: Optional[Tuple[int, int, int, int]] = None):
        """
        Start mouse movement in background task.

        Args:
            min_interval: Minimum time between movements
            max_interval: Maximum time between movements
            excluded_zone: Area to avoid (x1, y1, x2, y2)
        """
        if self.movement_task and not self.movement_task.done():
            return

        self.movement_task = asyncio.create_task(
            self.start_random_movement(min_interval, max_interval, excluded_zone)
        )

    def stop(self):
        """Stop random mouse movement."""
        self.is_active = False
        if self.movement_task:
            self.movement_task.cancel()
            self.movement_task = None

================
File: src/codesimulator/path_utils.py
================
import os
import sys
import tempfile
import platform
from .logging_config import logger


def is_packaged():
    """Check if running in a packaged environment."""
    return getattr(sys, 'frozen', False)


def get_resource_path(app=None, *paths):
    """
    Get the correct path to resource files, working in both development and packaged environments.

    Args:
        app: Optional Toga app instance
        *paths: Path components to join to the resource path
    """
    try:
        # First try to use Toga's paths if available
        if app and hasattr(app, 'paths') and hasattr(app.paths, 'resources'):
            base_path = app.paths.resources
            logger.debug(f"Using Toga resource path: {base_path}")
        else:
            # Fallback based on environment
            if is_packaged():
                # Packaged app - path depends on platform
                if platform.system() == 'Darwin':  # macOS
                    base_path = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(sys.executable))),
                                             'Resources')
                elif platform.system() == 'Windows':
                    base_path = os.path.join(os.path.dirname(sys.executable), 'app', 'resources')
                else:  # Linux and others
                    base_path = os.path.join(os.path.dirname(sys.executable), 'resources')
                logger.debug(f"Using packaged resource path: {base_path}")
            else:
                # Development environment
                base_path = os.path.join(os.path.dirname(__file__), 'resources')
                logger.debug(f"Using development resource path: {base_path}")

        full_path = os.path.join(base_path, *paths)
        logger.debug(f"Full resource path: {full_path}")
        return full_path
    except Exception as e:
        logger.error(f"Error getting resource path: {e}")
        # Last resort fallback
        return os.path.join(os.path.dirname(__file__), 'resources', *paths)


def get_log_path():
    """Returns a path suitable for log files."""
    if is_packaged():
        # Use system temp directory for packaged app
        log_dir = tempfile.gettempdir()
    else:
        # Use resources directory in development
        log_dir = os.path.join(os.path.dirname(__file__), 'resources')

    if not os.path.exists(log_dir):
        try:
            os.makedirs(log_dir)
        except Exception:
            pass

    return os.path.join(log_dir, 'codesimulator.log')


def log_environment_info():
    """Log detailed environment information for debugging."""
    info = {
        "Platform": platform.system(),
        "Python Version": sys.version,
        "Packaged App": is_packaged(),
        "Executable Path": sys.executable,
        "Current Directory": os.getcwd(),
        "Module Path": os.path.dirname(__file__),
        "Resource Path Example": get_resource_path(None, 'config.json')
    }

    for key, value in info.items():
        logger.info(f"{key}: {value}")


def get_log_path():
    """Returns a path suitable for log files."""
    try:
        if is_packaged():
            # Use a more accessible location for packaged app
            if platform.system() == "Windows":
                log_dir = os.path.join(os.environ.get('APPDATA', os.path.expanduser("~")), "CodeSimulator", "logs")
            elif platform.system() == "Darwin":  # macOS
                log_dir = os.path.join(os.path.expanduser("~"), "Library", "Logs", "CodeSimulator")
            else:  # Linux and others
                log_dir = os.path.join(os.path.expanduser("~"), ".codesimulator", "logs")
        else:
            # Use resources directory in development
            log_dir = os.path.join(os.path.dirname(__file__), 'resources')

        # Create directory if it doesn't exist
        if not os.path.exists(log_dir):
            os.makedirs(log_dir)

        return os.path.join(log_dir, 'codesimulator.log')
    except Exception as e:
        # If all else fails, use system temp directory
        import tempfile
        return os.path.join(tempfile.gettempdir(), 'codesimulator.log')

================
File: tests/codesimulator.py
================
import os
import sys
import tempfile
from pathlib import Path

import pytest


def run_tests():
    project_path = Path(__file__).parent.parent
    os.chdir(project_path)

    # Determine any args to pass to pytest. If there aren't any,
    # default to running the whole test suite.
    args = sys.argv[1:]
    if len(args) == 0:
        args = ["tests"]

    returncode = pytest.main(
        [
            # Turn up verbosity
            "-vv",
            # Disable color
            "--color=no",
            # Overwrite the cache directory to somewhere writable
            "-o",
            f"cache_dir={tempfile.gettempdir()}/.pytest_cache",
        ] + args
    )

    print(f">>>>>>>>>> EXIT {returncode} <<<<<<<<<<")


if __name__ == "__main__":
    run_tests()

================
File: tests/test_app.py
================
def test_first():
    """An initial test for the app."""
    assert 1 + 1 == 2

================
File: .gitignore
================
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# OSX useful to ignore
*.DS_Store
.AppleDouble
.LSOverride

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# C extensions
*.so

# Distribution / packaging
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
*.dist-info/
*.egg-info/
.installed.cfg
*.egg

# IntelliJ Idea family of suites
.idea
*.iml
## File-based project format:
*.ipr
*.iws
## mpeltonen/sbt-idea plugin
.idea_modules/

# Briefcase log files
logs/

================
File: CHANGELOG
================
# Code Simulator Release Notes

## 0.0.1 (12 Jan 2025)

* Initial release

================
File: deploy.sh
================
#!/bin/bash
# Enhanced deployment script for Code Simulator application using Briefcase
# This script repairs Briefcase installation issues and handles the deployment process

# ANSI color codes for better readability
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
RESET='\033[0m'

# Function to print colored output
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${RESET}"
}

# Function to execute command with error handling
execute_command() {
    local command="$1"
    local message="$2"
    local allow_fail=${3:-false}

    print_message "$BLUE" "► $message"

    if eval "$command"; then
        print_message "$GREEN" "✓ Success!"
        return 0
    else
        local exit_code=$?
        if [ "$allow_fail" = true ]; then
            print_message "$YELLOW" "⚠ Command failed but continuing (Exit code: $exit_code)"
            return $exit_code
        else
            print_message "$RED" "✗ Failed to $message (Exit code: $exit_code)"
            exit 1
        fi
    fi
}

# Ensure we're in the project root directory
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
cd "$script_dir" || exit 1

# Check if this is a Python project
if [ ! -f "pyproject.toml" ]; then
    print_message "$RED" "No pyproject.toml found. This doesn't appear to be a valid Python project."
    print_message "$YELLOW" "Make sure you're running this script from the project root directory."
    exit 1
fi

# Function to completely fix Briefcase installation
fix_briefcase_installation() {
    print_message "$BLUE" "Fixing Briefcase installation..."

    # Check if we're in a virtual environment
    if [[ -z "$VIRTUAL_ENV" ]]; then
        print_message "$YELLOW" "Not running in a virtual environment. Creating one..."

        # Create a new virtual environment
        execute_command "python3 -m venv .venv" "Creating virtual environment"

        # Activate the virtual environment
        execute_command "source .venv/bin/activate" "Activating virtual environment"

        print_message "$GREEN" "Virtual environment created and activated."
    else
        print_message "$GREEN" "Using existing virtual environment: $VIRTUAL_ENV"
    fi

    # Update pip to latest version
    execute_command "pip install --upgrade pip" "Upgrading pip"

    # Uninstall problematic packages
    execute_command "pip uninstall -y briefcase setuptools setuptools_scm" "Uninstalling problematic packages" true

    # Install correct version of setuptools
    execute_command "pip install 'setuptools>=61.0.0'" "Installing correct setuptools version"

    # Install setuptools_scm
    execute_command "pip install setuptools_scm" "Installing setuptools_scm"

    # Set environment variable to prevent version detection issues
    export SETUPTOOLS_SCM_PRETEND_VERSION_FOR_BRIEFCASE=0.3.14

    # Install Briefcase with pinned version
    execute_command "pip install briefcase==0.3.14" "Installing Briefcase 0.3.14"

    # Verify installation
    if briefcase --version > /dev/null 2>&1; then
        print_message "$GREEN" "Briefcase successfully installed!"
        return 0
    else
        print_message "$RED" "Briefcase installation still has issues."
        return 1
    fi
}

# Function to clean the project
clean_project() {
    print_message "$BLUE" "Cleaning project..."

    # Remove Python cache files
    execute_command "find . -type d -name \"__pycache__\" -exec rm -r {} +  2>/dev/null || true" "Removing __pycache__ directories" true
    execute_command "find . -type f -name \"*.pyc\" -delete" "Removing .pyc files"
    execute_command "find . -type f -name \"*.pyo\" -delete" "Removing .pyo files"
    execute_command "find . -type d -name \"*.egg-info\" -exec rm -r {} + 2>/dev/null || true" "Removing .egg-info directories" true
    execute_command "find . -type d -name \"*.dist-info\" -exec rm -r {} + 2>/dev/null || true" "Removing .dist-info directories" true

    # Manual cleanup for Briefcase directories
    execute_command "rm -rf macOS/ windows/ linux/ android/ iOS/ web/ 2>/dev/null || true" "Manually cleaning build directories" true

    # If Briefcase is properly installed, use it for cleaning
    if briefcase --version > /dev/null 2>&1; then
        execute_command "briefcase clean" "Cleaning with Briefcase" true
    fi

    print_message "$GREEN" "Project cleaned successfully."
}

# Function to create a new application build
build_app() {
    local platform=$1
    print_message "$BLUE" "Building application for $platform..."

    # Ensure Briefcase is properly installed
    if ! briefcase --version > /dev/null 2>&1; then
        print_message "$YELLOW" "Briefcase is not properly installed. Attempting to fix..."
        fix_briefcase_installation
    fi

    # Make sure we have the correct versions (in case the script is run multiple times)
    export SETUPTOOLS_SCM_PRETEND_VERSION_FOR_BRIEFCASE=0.3.14

    # Set platform-specific environment variables
    case "$platform" in
        macOS|macos|darwin)
            # Create the app for macOS
            execute_command "briefcase create macOS && briefcase build macOS" "Building for macOS"
            ;;
        windows|win)
            # Create the app for Windows
            execute_command "briefcase create windows && briefcase build windows" "Building for Windows"
            ;;
        linux)
            # Create the app for Linux
            execute_command "briefcase create linux && briefcase build linux" "Building for Linux"
            ;;
        all)
            # Create for all platforms
            execute_command "briefcase create && briefcase build" "Building for all platforms" true
            ;;
        *)
            print_message "$RED" "Unknown platform: $platform"
            exit 1
            ;;
    esac

    print_message "$GREEN" "Application build completed."
}

# Function to package the application
package_app() {
    local platform=$1

    print_message "$BLUE" "Packaging application for $platform..."

    # Ensure Briefcase is properly installed
    if ! briefcase --version > /dev/null 2>&1; then
        print_message "$YELLOW" "Briefcase is not properly installed. Attempting to fix..."
        fix_briefcase_installation
    fi

    # Make sure we have the correct versions
    export SETUPTOOLS_SCM_PRETEND_VERSION_FOR_BRIEFCASE=0.3.14

    case "$platform" in
        macOS|macos|darwin)
            execute_command "briefcase package macOS --no-sign" "Creating macOS package (without signing)"
            ;;
        windows|win)
            execute_command "briefcase package windows" "Creating Windows package"
            ;;
        linux)
            execute_command "briefcase package linux" "Creating Linux package"
            ;;
        all)
            execute_command "briefcase package" "Creating packages for all platforms" true
            ;;
        *)
            print_message "$RED" "Unknown platform: $platform"
            exit 1
            ;;
    esac

    print_message "$GREEN" "Application packaging completed."
}

# Function to publish the app
publish_app() {
    local version=$(grep -m 1 "version" pyproject.toml | sed 's/.*version = "\(.*\)".*/\1/')

    print_message "$BLUE" "Preparing to publish version $version..."

    # Create GitHub release if appropriate tools are available
    if command -v gh &>/dev/null; then
        print_message "$BLUE" "Creating GitHub release..."

        # Check if a tag already exists for this version
        if ! git rev-parse "v$version" >/dev/null 2>&1; then
            execute_command "git tag -a \"v$version\" -m \"Version $version release\"" "Creating git tag" true
            execute_command "git push origin \"v$version\"" "Pushing git tag" true
        fi

        # Create release
        execute_command "gh release create \"v$version\" --title \"Version $version\" --notes \"Release of version $version\"" "Creating GitHub release" true

        # Upload macOS assets if they exist
        if [ -d "macOS/app" ]; then
            print_message "$BLUE" "Uploading macOS package..."
            execute_command "cd macOS/app && zip -r \"../../CodeSimulator-$version-macOS.zip\" \"Code Simulator.app\"" "Creating macOS zip archive" true
            execute_command "gh release upload \"v$version\" \"CodeSimulator-$version-macOS.zip\"" "Uploading macOS package" true
        fi

        # Upload Windows assets if they exist
        if [ -f "windows/Code Simulator-$version-setup.exe" ]; then
            print_message "$BLUE" "Uploading Windows package..."
            execute_command "gh release upload \"v$version\" \"windows/Code Simulator-$version-setup.exe\"" "Uploading Windows installer" true
        fi

        # Upload Linux assets if they exist
        if [ -f "linux/Code_Simulator-$version.AppImage" ]; then
            print_message "$BLUE" "Uploading Linux package..."
            execute_command "gh release upload \"v$version\" \"linux/Code_Simulator-$version.AppImage\"" "Uploading Linux AppImage" true
        fi
    else
        print_message "$YELLOW" "GitHub CLI not found. Skipping GitHub release creation."
        print_message "$YELLOW" "To publish to GitHub, install the GitHub CLI (gh) and run this script again."
    fi

    print_message "$GREEN" "Publication process completed."
}

# Function to detect current platform
detect_platform() {
    case "$(uname -s)" in
        Darwin*)    echo "macOS" ;;
        Linux*)     echo "linux" ;;
        CYGWIN*|MINGW*|MSYS*) echo "windows" ;;
        *)          echo "all" ;;
    esac
}

# Main script execution
print_message "$BLUE" "=== Code Simulator Deployment Script ==="
print_message "$BLUE" "=== Version $(date +%Y.%m.%d) ==="

# Process command line arguments
platform=$(detect_platform)
while [[ $# -gt 0 ]]; do
    case $1 in
        --fix-briefcase)
            fix_only=true
            shift
            ;;
        --clean)
            clean_only=true
            shift
            ;;
        --build)
            build_only=true
            shift
            ;;
        --package)
            package_only=true
            shift
            ;;
        --publish)
            publish_only=true
            shift
            ;;
        --platform)
            platform=$2
            shift 2
            ;;
        --help)
            echo "Usage: $0 [options]"
            echo "Options:"
            echo "  --fix-briefcase     Only fix Briefcase installation"
            echo "  --clean             Only clean the project"
            echo "  --build             Only build the application"
            echo "  --package           Only package the application"
            echo "  --publish           Only publish the application"
            echo "  --platform [platform] Specify target platform (macos, windows, linux, all)"
            echo "  --help              Show this help message"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Execute requested actions or perform full deployment
if [ "$fix_only" = true ]; then
    fix_briefcase_installation
elif [ "$clean_only" = true ]; then
    clean_project
elif [ "$build_only" = true ]; then
    clean_project
    build_app "$platform"
elif [ "$package_only" = true ]; then
    package_app "$platform"
elif [ "$publish_only" = true ]; then
    publish_app
else
    # Full deployment process
    fix_briefcase_installation
    clean_project
    build_app "$platform"
    package_app "$platform"
    publish_app
fi

print_message "$GREEN" "=== Deployment process completed successfully ==="

================
File: LICENSE
================
Copyright (c) 2025, rylxes
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice, this
  list of conditions and the following disclaimer in the documentation and/or
  other materials provided with the distribution.

* Neither the name of the copyright holder nor the names of its
  contributors may be used to endorse or promote products derived from this
  software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.

================
File: pyproject.toml
================
# This project was generated with 0.3.20 using template: https://github.com/beeware/briefcase-template@v0.3.20
[tool.briefcase]
project_name = "Code Simulator"
bundle = "com.rylxes.code-simulator"
version = "0.0.1"
url = "https://code-simulator.rylxes.com/codesimulator"
license.file = "LICENSE"
author = "rylxes"
author_email = "rylxes@gmail.com"

[tool.briefcase.app.codesimulator]
formal_name = "Code Simulator"
description = "My first application"
long_description = """More details about the app should go here.
"""
sources = [
    "src/codesimulator",
]
test_sources = [
    "tests",
]

requires = [
    "pyautogui>=0.9.53",
    "PyQt5>=5.15"
]
test_requires = [
    "pytest",
]

resources = [
    "src/codesimulator/resources",
]

[tool.briefcase.app.codesimulator.macOS]
universal_build = true
requires = [
    "toga-cocoa~=0.4.7",
    "std-nslog~=1.0.3",
    "pyautogui>=0.9.53",
    "PyQt5>=5.15"
]

entitlements = [
    "com.apple.security.automation.apple-events",
    "com.apple.security.device.camera",  # if needed
    "com.apple.security.device.audio-input",  # if needed
]


[tool.briefcase.app.codesimulator.macOS.info]
NSAppleEventsUsageDescription = "Code Simulator needs to control other applications to perform simulations."
NSAccessibilityUsageDescription = "Code Simulator needs accessibility access to simulate keyboard and mouse inputs."

[tool.briefcase.app.codesimulator.linux]
requires = [
    "toga-cocoa~=0.4.7",
    "std-nslog~=1.0.3",
    "pyautogui>=0.9.53",
    "PyQt5>=5.15"
]

[tool.briefcase.app.codesimulator.linux.system.debian]
system_requires = [
    # Needed to compile pycairo wheel
    "libcairo2-dev",
    # Needed to compile PyGObject wheel
    "libgirepository1.0-dev",
]

system_runtime_requires = [
    # Needed to provide GTK and its GI bindings
    "gir1.2-gtk-3.0",
    "libgirepository-1.0-1",
    # Dependencies that GTK looks for at runtime
    "libcanberra-gtk3-module",
    # Needed to provide WebKit2 at runtime
    # Note: Debian 11 and Ubuntu 20.04 require gir1.2-webkit2-4.0 instead
    # "gir1.2-webkit2-4.1",
]

[tool.briefcase.app.codesimulator.linux.system.rhel]
system_requires = [
    # Needed to compile pycairo wheel
    "cairo-gobject-devel",
    # Needed to compile PyGObject wheel
    "gobject-introspection-devel",
]

system_runtime_requires = [
    # Needed to support Python bindings to GTK
    "gobject-introspection",
    # Needed to provide GTK
    "gtk3",
    # Dependencies that GTK looks for at runtime
    "libcanberra-gtk3",
    # Needed to provide WebKit2 at runtime
    # "webkit2gtk3",
]

[tool.briefcase.app.codesimulator.linux.system.suse]
system_requires = [
    # Needed to compile pycairo wheel
    "cairo-devel",
    # Needed to compile PyGObject wheel
    "gobject-introspection-devel",
]

system_runtime_requires = [
    # Needed to provide GTK
    "gtk3",
    # Needed to support Python bindings to GTK
    "gobject-introspection", "typelib(Gtk) = 3.0",
    # Dependencies that GTK looks for at runtime
    "libcanberra-gtk3-module",
    # Needed to provide WebKit2 at runtime
    # "libwebkit2gtk3", "typelib(WebKit2)",
]

[tool.briefcase.app.codesimulator.linux.system.arch]
system_requires = [
    # Needed to compile pycairo wheel
    "cairo",
    # Needed to compile PyGObject wheel
    "gobject-introspection",
    # Runtime dependencies that need to exist so that the
    # Arch package passes final validation.
    # Needed to provide GTK
    "gtk3",
    # Dependencies that GTK looks for at runtime
    "libcanberra",
    # Needed to provide WebKit2
    # "webkit2gtk",
]

system_runtime_requires = [
    # Needed to provide GTK
    "gtk3",
    # Needed to provide PyGObject bindings
    "gobject-introspection-runtime",
    # Dependencies that GTK looks for at runtime
    "libcanberra",
    # Needed to provide WebKit2 at runtime
    # "webkit2gtk",
]

[tool.briefcase.app.codesimulator.linux.appimage]
manylinux = "manylinux_2_28"

system_requires = [
    # Needed to compile pycairo wheel
    "cairo-gobject-devel",
    # Needed to compile PyGObject wheel
    "gobject-introspection-devel",
    # Needed to provide GTK
    "gtk3-devel",
    # Dependencies that GTK looks for at runtime, that need to be
    # in the build environment to be picked up by linuxdeploy
    "libcanberra-gtk3",
    "PackageKit-gtk3-module",
    "gvfs-client",
]

linuxdeploy_plugins = [
    "DEPLOY_GTK_VERSION=3 gtk",
]

[tool.briefcase.app.codesimulator.linux.flatpak]
flatpak_runtime = "org.gnome.Platform"
flatpak_runtime_version = "47"
flatpak_sdk = "org.gnome.Sdk"

[tool.briefcase.app.codesimulator.windows]
requires = [
    "toga-winforms~=0.4.7",
    "pyautogui>=0.9.53",
    "PyQt5>=5.15"
]

# Mobile deployments
[tool.briefcase.app.codesimulator.iOS]
requires = [
    "toga-iOS~=0.4.7",
    "std-nslog~=1.0.3",
]

[tool.briefcase.app.codesimulator.android]
requires = [
    "toga-android~=0.4.7",
]

base_theme = "Theme.MaterialComponents.Light.DarkActionBar"

build_gradle_dependencies = [
    "com.google.android.material:material:1.12.0",
    # Needed for DetailedList
    # "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0",
    # Needed for MapView
    # "org.osmdroid:osmdroid-android:6.1.20",
]

# Web deployments
[tool.briefcase.app.codesimulator.web]
requires = [
    "toga-web~=0.4.7",
    "pyautogui>=0.9.53",
    "PyQt5>=5.15"
]
style_framework = "Shoelace v2.3"

================
File: README.rst
================
briefcase package
 briefcase dev -r



================================================================
End of Codebase
================================================================
